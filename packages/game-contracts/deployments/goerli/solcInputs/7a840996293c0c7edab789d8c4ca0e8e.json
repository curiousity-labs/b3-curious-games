{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/Battleship.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.17;\n\n/**\n * @title onchain battleship\n */\ncontract Battleship {\n    /**\n     * @notice This will be used to track which addresses are parcipating\n     * @param team1 address of team 1\n     * @param team2 address of team 2\n     */\n    event GameCreated(address team1, address team2);\n    /**\n     * @notice This event will only event fire twice per contract, when 2 events have been fired game can begin\n     * @param team address of team 1\n     */\n    event TeamReady(address team);\n\n    /**\n     * @notice This will keep history of moves taken\n     * @notice This should filtered and used by front-end to update hit/misses\n     * @param team address of team whose turn was taken\n     * @param target target location of attempted hit\n     */\n    event TurnFinished(address team, bytes4 target, bool isSuccessful);\n\n    event GameFinished(address winner);\n\n    /**\n     * @dev Set to 0x0000~ while game is active. game is over when winner is set\n     * @notice This should be updated with winner when game is over\n     */\n    address game_winner = address(0);\n\n    address public team1 = address(0);\n    address public team2 = address(0);\n    address public currentTurn = address(0);\n\n    /**\n     * unit8 0 | undefined: nothing\n     * unit8 1 : ship\n     */\n    struct TeamHits {\n        uint8 hitCount;\n        mapping(bytes4 => uint8) targeted;\n    }\n\n    mapping(address => mapping(bytes4 => uint8)) private locations;\n    mapping(address => TeamHits) teamHits;\n    mapping(address => bool) private teamReady;\n\n    // function getTeamHitCounts()\n    //     public\n    //     view\n    //     returns (uint8 team1Count, uint8 team2Count)\n    // {\n    //     team1Count = teamHits[team1].hitCount;\n    //     team2Count = teamHits[team2].hitCount;\n    // }\n\n    /**\n     * initilizes game between two addresses\n     */\n    // @todo create factory contract\n    constructor(address _team2) {\n        team1 = msg.sender;\n        team2 = _team2;\n        emit GameCreated(team1, team2);\n    }\n\n    /**\n     * Sets ship locations for each team\n     * @notice emits event 'TeamReady'\n     */\n    function checkAndSetPieces(\n        bytes4[15] memory targets,\n        address team\n    ) private {\n        for (uint256 i; i < targets.length; i++) {\n            locations[team][targets[i]] = 1;\n        }\n        teamReady[team] = true;\n        emit TeamReady(team);\n    }\n\n    modifier piecesSet() {\n        require(teamReady[msg.sender] == false, \"Pieces Set\");\n        _;\n    }\n\n    /**\n     * Sets locations for team 1 ships\n     * @param targets byte array of ship locations\n     * @notice Team 1 Only | Team Pieces not already set\n     *\n     */\n    function setTeamOnePieces(bytes4[15] memory targets) external piecesSet {\n        require(msg.sender == team1, \"Team One Only\");\n        checkAndSetPieces(targets, msg.sender);\n    }\n\n    /**\n     * Sets locations for team 2 ships\n     * @param targets byte array of ship locations\n     * @notice Team 2 Only | Team Pieces not already set\n     *\n     */\n    function setTeamTwoPieces(bytes4[15] memory targets) external piecesSet {\n        require(msg.sender == team2, \"Team Two Only\");\n        checkAndSetPieces(targets, msg.sender);\n    }\n\n    modifier gameOver() {\n        require(game_winner == address(0), \"Game is Over\");\n        _;\n    }\n\n    function targetSpot(bytes4 target, address defTeam) private gameOver {\n        if (locations[defTeam][target] == 1 && teamHits[msg.sender].targeted[target] == 0) {\n            uint8 raisedHit = ++teamHits[msg.sender].hitCount;\n            teamHits[msg.sender].hitCount = raisedHit;\n            teamHits[msg.sender].targeted[target] = 1;\n            if (raisedHit == 15) {\n                game_winner = msg.sender;\n                emit GameFinished(msg.sender);\n            } else {\n                emit TurnFinished(msg.sender, target, true);\n            }\n        } else {\n            emit TurnFinished(msg.sender, target, false);\n        }\n\n        currentTurn = defTeam;\n    }\n\n    modifier checkTurn() {\n        if (\n            (currentTurn == address(0) && msg.sender == team2)\n        ) {\n            _;\n            return;\n        }\n        require(currentTurn == msg.sender, \"Not your turn\");\n        _;\n    }\n\n    function takeTurn(bytes4 target) external checkTurn {\n        if (msg.sender == team1) {\n            targetSpot(target, team2);\n        } else {\n            targetSpot(target, team1);\n        }\n    }\n\n    /**\n     *\n     */\n    // function forfeitMatch() public {}\n}\n"
    },
    "contracts/BattleshipFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./BattleshipImpl.sol\";\n\ncontract BattleshipFactory {\n    mapping(uint => BattleshipImpl) BattleshipGames;\n    uint gameId;\n\n    address public battleshipImplAddr;\n\n    function deployAndChallange(address teamtwo) external {\n        BattleshipImpl newGame = BattleshipImpl(Clones.clone(battleshipImplAddr));\n\n        newGame.init(msg.sender, teamtwo);\n\n        BattleshipGames[gameId] = newGame;\n\n        gameId = ++gameId;\n    }\n\n    constructor(address implAddress) {\n        battleshipImplAddr = implAddress;\n    }\n\n    function getGames() public view returns (BattleshipImpl[] memory) {\n        BattleshipImpl[] memory games = new BattleshipImpl[](gameId);\n        for (uint i = 0; i < gameId; i++) {\n            games[i] = BattleshipGames[i];\n        }\n        return games;\n    }\n\n    function getGame(uint _gameId) public view returns (BattleshipImpl) {\n        return BattleshipGames[_gameId];\n    }\n}\n"
    },
    "contracts/BattleshipImpl.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.17;\n\n/**\n * @title onchain battleship\n */\ncontract BattleshipImpl {\n    /**\n     * @notice This will be used to track which addresses are parcipating\n     * @param team1 address of team 1\n     * @param team2 address of team 2\n     */\n    event GameCreated(address team1, address team2);\n    /**\n     * @notice This event will only event fire twice per contract, when 2 events have been fired game can begin\n     * @param team address of team 1\n     */\n    event TeamReady(address team);\n\n    /**\n     * @notice This will keep history of moves taken\n     * @notice This should filtered and used by front-end to update hit/misses\n     * @param team address of team whose turn was taken\n     * @param target target location of attempted hit\n     */\n    event TurnFinished(address team, bytes4 target, bool isSuccessful);\n\n    event GameFinished(address winner);\n\n    /**\n     * @dev Set to 0x0000~ while game is active. game is over when winner is set\n     * @notice This should be updated with winner when game is over\n     */\n    address game_winner = address(0);\n\n    address public team1 = address(0);\n    address public team2 = address(0);\n    address public currentTurn = address(0);\n\n    /**\n     * unit8 0 | undefined: nothing\n     * unit8 1 : ship\n     */\n    struct TeamHits {\n        uint8 hitCount;\n        mapping(bytes4 => uint8) targeted;\n    }\n\n    mapping(address => mapping(bytes4 => uint8)) private locations;\n    mapping(address => TeamHits) teamHits;\n    mapping(address => bool) private teamReady;\n\n    // function getTeamHitCounts()\n    //     public\n    //     view\n    //     returns (uint8 team1Count, uint8 team2Count)\n    // {\n    //     team1Count = teamHits[team1].hitCount;\n    //     team2Count = teamHits[team2].hitCount;\n    // }\n\n    /**\n     * initilizes game between two addresses\n     */\n    // @todo create factory contract\n    function init(address _team1, address _team2) public {\n        team1 = _team1;\n        team2 = _team2;\n        emit GameCreated(team1, team2);\n    }\n\n    /**\n     * Sets ship locations for each team\n     * @notice emits event 'TeamReady'\n     */\n    function checkAndSetPieces(\n        bytes4[15] memory targets,\n        address team\n    ) private {\n        for (uint256 i; i < targets.length; i++) {\n            locations[team][targets[i]] = 1;\n        }\n        teamReady[team] = true;\n        emit TeamReady(team);\n    }\n\n    modifier piecesSet() {\n        require(teamReady[msg.sender] == false, \"Pieces Set\");\n        _;\n    }\n\n    /**\n     * Sets locations for team 1 ships\n     * @param targets byte array of ship locations\n     * @notice Team 1 Only | Team Pieces not already set\n     *\n     */\n    function setTeamOnePieces(bytes4[15] memory targets) external piecesSet {\n        require(msg.sender == team1, \"Team One Only\");\n        checkAndSetPieces(targets, msg.sender);\n    }\n\n    /**\n     * Sets locations for team 2 ships\n     * @param targets byte array of ship locations\n     * @notice Team 2 Only | Team Pieces not already set\n     *\n     */\n    function setTeamTwoPieces(bytes4[15] memory targets) external piecesSet {\n        require(msg.sender == team2, \"Team Two Only\");\n        checkAndSetPieces(targets, msg.sender);\n    }\n\n    modifier gameOver() {\n        require(game_winner == address(0), \"Game is Over\");\n        _;\n    }\n\n    function targetSpot(bytes4 target, address defTeam) private gameOver {\n        if (locations[defTeam][target] == 1 && teamHits[msg.sender].targeted[target] == 0) {\n            uint8 raisedHit = ++teamHits[msg.sender].hitCount;\n            teamHits[msg.sender].hitCount = raisedHit;\n            teamHits[msg.sender].targeted[target] = 1;\n            if (raisedHit == 15) {\n                game_winner = msg.sender;\n                emit GameFinished(msg.sender);\n            } else {\n                emit TurnFinished(msg.sender, target, true);\n            }\n        } else {\n            emit TurnFinished(msg.sender, target, false);\n        }\n\n        currentTurn = defTeam;\n    }\n\n    modifier checkTurn() {\n        if (\n            (currentTurn == address(0) && msg.sender == team2)\n        ) {\n            _;\n            return;\n        }\n        require(currentTurn == msg.sender, \"Not your turn\");\n        _;\n    }\n\n    function takeTurn(bytes4 target) external checkTurn {\n        if (msg.sender == team1) {\n            targetSpot(target, team2);\n        } else {\n            targetSpot(target, team1);\n        }\n    }\n\n    /**\n     *\n     */\n    // function forfeitMatch() public {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}