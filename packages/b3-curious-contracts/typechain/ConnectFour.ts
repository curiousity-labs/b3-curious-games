/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ConnectFourInterface extends utils.Interface {
  functions: {
    "board(uint256,uint256)": FunctionFragment;
    "currentTurn()": FunctionFragment;
    "game_winner()": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "playTurn(uint256)": FunctionFragment;
    "teamOne()": FunctionFragment;
    "teamTwo()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "board"
      | "currentTurn"
      | "game_winner"
      | "init"
      | "playTurn"
      | "teamOne"
      | "teamTwo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "board",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "game_winner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playTurn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "teamOne", values?: undefined): string;
  encodeFunctionData(functionFragment: "teamTwo", values?: undefined): string;

  decodeFunctionResult(functionFragment: "board", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentTurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "game_winner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playTurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamTwo", data: BytesLike): Result;

  events: {
    "GameFinished(address)": EventFragment;
    "TurnTaken(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TurnTaken"): EventFragment;
}

export interface GameFinishedEventObject {
  winnder: string;
}
export type GameFinishedEvent = TypedEvent<[string], GameFinishedEventObject>;

export type GameFinishedEventFilter = TypedEventFilter<GameFinishedEvent>;

export interface TurnTakenEventObject {
  team: string;
  col: BigNumber;
  row: BigNumber;
}
export type TurnTakenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TurnTakenEventObject
>;

export type TurnTakenEventFilter = TypedEventFilter<TurnTakenEvent>;

export interface ConnectFour extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectFourInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    board(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { state: number }>;

    currentTurn(overrides?: CallOverrides): Promise<[string]>;

    game_winner(overrides?: CallOverrides): Promise<[string]>;

    init(
      _teamOne: PromiseOrValue<string>,
      _teamTwo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playTurn(
      col: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    teamOne(overrides?: CallOverrides): Promise<[string]>;

    teamTwo(overrides?: CallOverrides): Promise<[string]>;
  };

  board(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  currentTurn(overrides?: CallOverrides): Promise<string>;

  game_winner(overrides?: CallOverrides): Promise<string>;

  init(
    _teamOne: PromiseOrValue<string>,
    _teamTwo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playTurn(
    col: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  teamOne(overrides?: CallOverrides): Promise<string>;

  teamTwo(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    board(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    currentTurn(overrides?: CallOverrides): Promise<string>;

    game_winner(overrides?: CallOverrides): Promise<string>;

    init(
      _teamOne: PromiseOrValue<string>,
      _teamTwo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    playTurn(
      col: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    teamOne(overrides?: CallOverrides): Promise<string>;

    teamTwo(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "GameFinished(address)"(winnder?: null): GameFinishedEventFilter;
    GameFinished(winnder?: null): GameFinishedEventFilter;

    "TurnTaken(address,uint256,uint256)"(
      team?: null,
      col?: null,
      row?: null
    ): TurnTakenEventFilter;
    TurnTaken(team?: null, col?: null, row?: null): TurnTakenEventFilter;
  };

  estimateGas: {
    board(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentTurn(overrides?: CallOverrides): Promise<BigNumber>;

    game_winner(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _teamOne: PromiseOrValue<string>,
      _teamTwo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playTurn(
      col: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    teamOne(overrides?: CallOverrides): Promise<BigNumber>;

    teamTwo(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    board(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentTurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    game_winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _teamOne: PromiseOrValue<string>,
      _teamTwo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playTurn(
      col: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    teamOne(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamTwo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
