/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    inputs: [],
    name: "SeasonOver",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "column",
        type: "uint256",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "row",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "teamNum",
        type: "uint8",
      },
    ],
    name: "didPlayerWin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gameId",
        type: "uint256",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160065534801561001557600080fd5b50610f70806100256000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806372fb97031161005057806372fb9703146100aa578063a2f77bcc146100cb578063ae5261301461014a57600080fd5b80631a2361e71461006c5780635e24b0f114610095575b600080fd5b61007f61007a366004610caf565b61016d565b60405161008c9190610cc8565b60405180910390f35b6100a86100a3366004610d42565b610208565b005b6100bd6100b8366004610d75565b610523565b60405190815260200161008c565b6101146100d9366004610caf565b6007602052600090815260409020805460018201546002909201546001600160a01b039182169282811692600160a01b90910460ff16911684565b604080516001600160a01b039586168152938516602085015260ff9092169183019190915291909116606082015260800161008c565b61015d610158366004610da5565b610715565b604051901515815260200161008c565b610175610b63565b600082815260076020526040808220815160c081019092529091600390910190600690835b828210156101fd576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116101bb57905050505050508152602001906001019061019a565b505050509050919050565b60ff821660009081526007602052604090206002015482906001600160a01b031615610260576040517fdf469ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160068160ff161061029e576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff841660009081526007602052604081206001808201549192918291600160a01b90910416156102d05760016102d3565b60025b600180850154919250600160a01b90910416156102fa5782546001600160a01b0316610309565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b031614610353576040517fe60c8f5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068160ff1610156103d9576000846003018860ff166006811061037c5761037c610df9565b018260ff166006811061039157610391610df9565b602081049091015460ff601f9092166101000a900416905060008190036103c657816103bc81610e57565b92509350506103d9565b50806103d181610e57565b915050610356565b5080836003018760ff16600681106103f3576103f3610df9565b018360ff166006811061040857610408610df9565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600184018054600160a01b900490911690601461044983610e57565b82546101009290920a60ff8181021990931691831602179091556040805133815291891660208301527f2080025c96ee0fbc95f61862d9ee484eff89fb949136b5e9d3f7db7fa92651aa92500160405180910390a16104aa87878484610715565b1561051a576002830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040805191825260ff891660208301527f27223f8d1d659564536abdf661d810b8a16ca4f6c69034f2a73b74b0853d9829910160405180910390a15b50505050505050565b6000816001600160a01b038116330361053b57600080fd5b6040805160a0810182523381526001600160a01b0385166020820152600081830181905260608201819052825160c0810190935291608082019083600681835b828210156105de576040805160c08101918290529085840190600690826000855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161059c57905050505050508152602001906001019061057b565b50505091525060068054600090815260076020908152604091829020845181546001600160a01b039182167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178355928601516001830180549588015160ff16600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090961691831691909117949094179093556060850151600282018054919094169216919091179091556080830151929350839290916106ab916003840191610b90565b5050600654604080519182523360208301526001600160a01b038716908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e915060600160405180910390a16006805490600061070983610e76565b90915550949350505050565b60ff8416600090815260076020526040812060030181610737828787876107f1565b90508060ff1660040361074f576001925050506107e9565b600061075d838888886108bd565b90508060ff1660040361077657600193505050506107e9565b600061078484898989610974565b90506107c86040518060400160405280601b81526020017f2d2d2d2d2d2d2d2d2d2d666f7277617264416e676c65436f756e7400000000008152508260ff16610a7a565b8060ff166004036107e05760019450505050506107e9565b60009450505050505b949350505050565b60006001816108008683610e90565b90505b61080e866006610eaf565b60ff168160ff1610156108555761082787828787610af1565b1561083e578161083681610e57565b925050610843565b610855565b8061084d81610e57565b915050610803565b5060ff8516156108b457600061086c600187610eaf565b90505b61087b87828787610af1565b15610892578161088a81610e57565b925050610897565b6108b2565b60ff8116156108b257806108aa81610ec8565b91505061086f565b505b95945050505050565b60006001816108cc8583610e90565b90505b6108da856006610eaf565b60ff168160ff161015610921576108f387878387610af1565b1561090a578161090281610e57565b92505061090f565b610921565b8061091981610e57565b9150506108cf565b5060ff8416156108b4576000610938600186610eaf565b90505b61094787878387610af1565b15610892578161095681610e57565b92505060ff8116156108b2578061096c81610ec8565b91505061093b565b60006001816109838583610e90565b90505b610991856006610eaf565b60ff168160ff1610156109d8576109aa87828387610af1565b156109c157816109b981610e57565b9250506109c6565b6109d8565b806109d081610e57565b915050610986565b5060ff8416158015906109ed575060ff851615155b156108b45760006109ff600186610eaf565b90506000610a0e600188610eaf565b90505b610a1d88828488610af1565b15610a345782610a2c81610e57565b935050610a39565b610a6e565b60ff82161580610a4a575060ff8116155b610a6e5781610a5881610ec8565b9250508080610a6690610ec8565b915050610a11565b50509050949350505050565b610aed8282604051602401610a90929190610ee5565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052610b42565b5050565b60008160ff16858560ff1660068110610b0c57610b0c610df9565b018460ff1660068110610b2157610b21610df9565b602081049091015460ff601f9092166101000a900416149050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040518060c001604052806006905b610b7a610bda565b815260200190600190039081610b725790505090565b8260068101928215610bca579160200282015b82811115610bca578251610bba9083906006610bf8565b5091602001919060010190610ba3565b50610bd6929150610c87565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610c7b5791602002820160005b83821115610c4c57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610c0e565b8015610c795782816101000a81549060ff0219169055600101602081600001049283019260010302610c4c565b505b50610bd6929150610c9b565b80821115610bd65760008155600101610c87565b80821115610bd65760008155600101610c87565b600060208284031215610cc157600080fd5b5035919050565b610480810181836000805b6006808210610ce25750610d22565b835185845b83811015610d0857825160ff16825260209283019290910190600101610ce7565b50505060c094909401935060209290920191600101610cd3565b5050505092915050565b803560ff81168114610d3d57600080fd5b919050565b60008060408385031215610d5557600080fd5b610d5e83610d2c565b9150610d6c60208401610d2c565b90509250929050565b600060208284031215610d8757600080fd5b81356001600160a01b0381168114610d9e57600080fd5b9392505050565b60008060008060808587031215610dbb57600080fd5b610dc485610d2c565b9350610dd260208601610d2c565b9250610de060408601610d2c565b9150610dee60608601610d2c565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103610e6d57610e6d610e28565b60010192915050565b60006000198203610e8957610e89610e28565b5060010190565b60ff8181168382160190811115610ea957610ea9610e28565b92915050565b60ff8281168282160390811115610ea957610ea9610e28565b600060ff821680610edb57610edb610e28565b6000190192915050565b604081526000835180604084015260005b81811015610f135760208187018101516060868401015201610ef6565b506000606082850101526060601f19601f830116840101915050826020830152939250505056fea2646970667358221220c98cc5bdd11ce4c4d5c7fae13dc6a83be16bbb491969066a0f69a6e03e1eb11464736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
