/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    inputs: [],
    name: "SeasonOver",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "gameId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "gameId",
        type: "uint8",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff1916600117905534801561001d57600080fd5b50610ef88061002d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635e24b0f11461005157806372fb97031461006657806377d79d10146100905780639b33b4291461010e575b600080fd5b61006461005f366004610cf0565b61012e565b005b610079610074366004610d23565b610487565b60405160ff90911681526020015b60405180910390f35b6100db61009e366004610d53565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff9091166060820152608001610087565b61012161011c366004610d53565b610611565b6040516100879190610d6e565b60ff821660009081526001602052604090206002015482906001600160a01b031615610186576040517fdf469ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160068160ff16106101c4576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b900416156101f65760016101f9565b60025b6002840154909150600160a01b9004600116156102205782546001600160a01b031661022f565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b031614610279576040517fe60c8f5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068160ff16101561033d576000846003018860ff16600681106102a2576102a2610dd2565b018260ff16600681106102b7576102b7610dd2565b602081049091015460ff601f9092166101000a900481169150821660050361030b576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff1660000361032a578161032081610e30565b925093505061033d565b508061033581610e30565b91505061027c565b5080836003018760ff166006811061035757610357610dd2565b018360ff166006811061036c5761036c610dd2565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b90049091169060146103ad83610e30565b82546101009290920a60ff8181021990931691831602179091556040805133815291891660208301527fa638f1c7a9f6a51af6b7475b0a380aedc2d796a73232ab384d88ba2c48e9038692500160405180910390a161040e878784846106b0565b1561047e576002830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040805191825260ff891660208301527fb6ab6ec5502355d4358cbc04aadd389e633dd1de77a3e4d93d76ddcbc46f52be910160405180910390a15b50505050505050565b6000816001600160a01b038116330361049f57600080fd5b6104a7610b8e565b6040805160a0810182523381526001600160a01b03868116602080840191825260008486018181526060860182815260808701898152835460ff908116855260019586905298909320875181549088167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178255955194810180549588169590961694909417909455516002830180549451909716600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090941694169390931791909117909355519091829161058b9060038301906006610bbb565b50506000546040805160ff90921682523360208301526001600160a01b038816908201527ffacb992b0f97ca4fcf8e7bae286dbf794116195c3b4e316d585ccbf61474f2ba915060600160405180910390a16000805460ff1690806105ef83610e30565b91906101000a81548160ff021916908360ff1602179055509350505050919050565b610619610b8e565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156106a5576040805160c08101918290529085840190600690826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610663579050505050505081526020019060010190610642565b505050509050919050565b60ff84166000908152600160205260408120600301816106d282878787610774565b90508060ff166004036106ea5760019250505061076c565b60006106f883888888610840565b90508060ff16600403610711576001935050505061076c565b600061071f848989896108f7565b90508060ff1660040361073957600194505050505061076c565b6000610747858a8a8a6109fd565b90508060ff166004036107625760019550505050505061076c565b6000955050505050505b949350505050565b60006001816107838683610e4f565b90505b610791866006610e6e565b60ff168160ff1610156107d8576107aa87828787610b3d565b156107c157816107b981610e30565b9250506107c6565b6107d8565b806107d081610e30565b915050610786565b5060ff8516156108375760006107ef600187610e6e565b90505b6107fe87828787610b3d565b15610815578161080d81610e30565b92505061081a565b610835565b60ff811615610835578061082d81610e87565b9150506107f2565b505b95945050505050565b600060018161084f8583610e4f565b90505b61085d856006610e6e565b60ff168160ff1610156108a45761087687878387610b3d565b1561088d578161088581610e30565b925050610892565b6108a4565b8061089c81610e30565b915050610852565b5060ff8416156108375760006108bb600186610e6e565b90505b6108ca87878387610b3d565b1561081557816108d981610e30565b92505060ff81161561083557806108ef81610e87565b9150506108be565b60006001816109068583610e4f565b90505b610914856006610e6e565b60ff168160ff16101561095b5761092d87828387610b3d565b15610944578161093c81610e30565b925050610949565b61095b565b8061095381610e30565b915050610909565b5060ff841615801590610970575060ff851615155b15610837576000610982600186610e6e565b90506000610991600188610e6e565b90505b6109a088828488610b3d565b156109b757826109af81610e30565b9350506109bc565b6109f1565b60ff821615806109cd575060ff8116155b6109f157816109db81610e87565b92505080806109e990610e87565b915050610994565b50509050949350505050565b6000600160ff841615801590610a15575060ff851615155b15610a9b576000610a27600186610e6e565b90506000610a36876001610e4f565b90505b610a4588828488610b3d565b15610a5c5782610a5481610e30565b935050610a61565b610a98565b60ff82161580610a74575060068160ff16115b610a985781610a8281610e87565b9250508080610a9090610e30565b915050610a39565b50505b60ff841615801590610aaf575060ff851615155b15610837576000610ac1856001610e4f565b90506000610ad0600188610e6e565b90505b60078260ff161080610ae3575060015b156109f157610af488828488610b3d565b156109b75782610b0381610e30565b93505060068260ff161180610b19575060ff8116155b6109f15781610b2781610e30565b9250508080610b3590610e87565b915050610ad3565b60008160ff16858560ff1660068110610b5857610b58610dd2565b018460ff1660068110610b6d57610b6d610dd2565b602081049091015460ff601f9092166101000a900416149050949350505050565b6040518060c001604052806006905b610ba5610c05565b815260200190600190039081610b9d5790505090565b8260068101928215610bf5579160200282015b82811115610bf5578251610be59083906006610c23565b5091602001919060010190610bce565b50610c01929150610cb2565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610ca65791602002820160005b83821115610c7757835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610c39565b8015610ca45782816101000a81549060ff0219169055600101602081600001049283019260010302610c77565b505b50610c01929150610cc6565b80821115610c015760008155600101610cb2565b80821115610c015760008155600101610cb2565b803560ff81168114610ceb57600080fd5b919050565b60008060408385031215610d0357600080fd5b610d0c83610cda565b9150610d1a60208401610cda565b90509250929050565b600060208284031215610d3557600080fd5b81356001600160a01b0381168114610d4c57600080fd5b9392505050565b600060208284031215610d6557600080fd5b610d4c82610cda565b610480810181836000805b6006808210610d885750610dc8565b835185845b83811015610dae57825160ff16825260209283019290910190600101610d8d565b50505060c094909401935060209290920191600101610d79565b5050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103610e4657610e46610e01565b60010192915050565b60ff8181168382160190811115610e6857610e68610e01565b92915050565b60ff8281168282160390811115610e6857610e68610e01565b600060ff821680610e9a57610e9a610e01565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019291505056fea2646970667358221220c1ca77468a2fd4009dfdbf25722caeb94c4b09ed36626bf29bfe0ffc494a4da064736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
