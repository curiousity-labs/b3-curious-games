/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    inputs: [],
    name: "SeasonOver",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e30806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635e24b0f11461005c57806372fb9703146100715780639b33b42914610084578063a2f77bcc146100ad578063d7c81b551461012b575b600080fd5b61006f61006a366004610c46565b610142565b005b61006f61007f366004610c79565b610429565b610097610092366004610ca9565b61055f565b6040516100a49190610cc4565b60405180910390f35b6100f86100bb366004610d28565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100a4565b61013460005481565b6040519081526020016100a4565b60ff82166000818152600160205260409020600201546001600160a01b03161561017f5760405163df469ccb60e01b815260040160405180910390fd5b8160058160ff1611156101a557604051631efccef760e11b815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b900416156101d75760016101da565b60025b6002840154909150600160a01b9004600116156102015782546001600160a01b0316610210565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b03161461024157604051631cc191eb60e31b815260040160405180910390fd5b60005b60078160ff1610156102ec5760058160ff16111561027557604051631efccef760e11b815260040160405180910390fd5b6000846003018260ff166006811061028f5761028f610d41565b018860ff16600681106102a4576102a4610d41565b602081049091015460ff601f9092166101000a900416905060008190036102d957816102cf81610d6d565b92509350506102ec565b50806102e481610d6d565b915050610244565b5080836003018360ff166006811061030657610306610d41565b018760ff166006811061031b5761031b610d41565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b900490911690601461035c83610d6d565b82546101009290920a60ff818102199093169183160217909155604080518a83168152336020820152918916908201527fa6f41f711ea470b4b237d1b3e43b201e53517677308ae067a273fb1948ddbf0c915060600160405180910390a16103c6878784846105fe565b15610420576002830180546001600160a01b031916339081179091556040805160ff8a16815260208101929092527fb7f35e624e036288272fbf3342c09219261ff29fdddd826989b289134e9ae535910160405180910390a15b50505050505050565b806001600160a01b038116330361043f57600080fd5b610447610ae4565b6040805160a0810182523381526001600160a01b038581166020808401918252600084860181815260608601828152608087018981528354845260019485905297909220865181549087166001600160a01b03199182161782559451938101805494871694909516939093179093559151600282018054935160ff16600160a01b026001600160a81b03199094169190941617919091179091559151909182916104f79060038301906006610b11565b5050600054604080519182523360208301526001600160a01b038716908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e915060600160405180910390a160008054908061055483610d8c565b919050555050505050565b610567610ae4565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156105f3576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116105b1579050505050505081526020019060010190610590565b505050509050919050565b60008061060d8686868661069e565b905080600403610621576001915050610696565b600061062f8787878761076a565b90508060040361064457600192505050610696565b600061065288888888610821565b9050806004036106685760019350505050610696565b600061067689898989610927565b90508060040361068d576001945050505050610696565b60009450505050505b949350505050565b60006001816106ad8683610da5565b90505b6106bb866006610dc4565b60ff168160ff161015610702576106d487828787610a76565b156106eb57816106e381610d8c565b9250506106f0565b610702565b806106fa81610d6d565b9150506106b0565b5060ff851615610761576000610719600187610dc4565b90505b61072887828787610a76565b1561073f578161073781610d8c565b925050610744565b61075f565b60ff81161561075f578061075781610ddd565b91505061071c565b505b95945050505050565b60006001816107798583610da5565b90505b610787856006610dc4565b60ff168160ff1610156107ce576107a087878387610a76565b156107b757816107af81610d8c565b9250506107bc565b6107ce565b806107c681610d6d565b91505061077c565b5060ff8416156107615760006107e5600186610dc4565b90505b6107f487878387610a76565b1561073f578161080381610d8c565b92505060ff81161561075f578061081981610ddd565b9150506107e8565b60006001816108308583610da5565b90505b61083e856006610dc4565b60ff168160ff1610156108855761085787828387610a76565b1561086e578161086681610d8c565b925050610873565b610885565b8061087d81610d6d565b915050610833565b5060ff84161580159061089a575060ff851615155b156107615760006108ac600186610dc4565b905060006108bb600188610dc4565b90505b6108ca88828488610a76565b156108e157826108d981610d8c565b9350506108e6565b61091b565b60ff821615806108f7575060ff8116155b61091b578161090581610ddd565b925050808061091390610ddd565b9150506108be565b50509050949350505050565b6000600160ff84161580159061093f575060ff851615155b156109d2576000610951600186610dc4565b90506000610960876001610da5565b90505b60068160ff1610156109cf5761097b88828488610a76565b15610992578261098a81610d8c565b935050610997565b6109cf565b60ff821615806109ab575060068160ff1610155b6109cf57816109b981610ddd565b92505080806109c790610d6d565b915050610963565b50505b60ff8416158015906109e6575060ff851615155b156107615760006109f8856001610da5565b90506000610a07600188610dc4565b90505b60068260ff16108015610a1b575060015b1561091b57610a2c88828488610a76565b156108e15782610a3b81610d8c565b93505060068260ff16101580610a52575060ff8116155b61091b5781610a6081610d6d565b9250508080610a6e90610ddd565b915050610a0a565b600080600160008760ff16815260200190815260200160002060030190508260ff16818560ff1660068110610aad57610aad610d41565b018660ff1660068110610ac257610ac2610d41565b602081049091015460ff601f9092166101000a90041614915050949350505050565b6040518060c001604052806006905b610afb610b5b565b815260200190600190039081610af35790505090565b8260068101928215610b4b579160200282015b82811115610b4b578251610b3b9083906006610b79565b5091602001919060010190610b24565b50610b57929150610c08565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610bfc5791602002820160005b83821115610bcd57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610b8f565b8015610bfa5782816101000a81549060ff0219169055600101602081600001049283019260010302610bcd565b505b50610b57929150610c1c565b80821115610b575760008155600101610c08565b80821115610b575760008155600101610c08565b803560ff81168114610c4157600080fd5b919050565b60008060408385031215610c5957600080fd5b610c6283610c30565b9150610c7060208401610c30565b90509250929050565b600060208284031215610c8b57600080fd5b81356001600160a01b0381168114610ca257600080fd5b9392505050565b600060208284031215610cbb57600080fd5b610ca282610c30565b610480810181836000805b6006808210610cde5750610d1e565b835185845b83811015610d0457825160ff16825260209283019290910190600101610ce3565b50505060c094909401935060209290920191600101610ccf565b5050505092915050565b600060208284031215610d3a57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103610d8357610d83610d57565b60010192915050565b600060018201610d9e57610d9e610d57565b5060010190565b60ff8181168382160190811115610dbe57610dbe610d57565b92915050565b60ff8281168282160390811115610dbe57610dbe610d57565b600060ff821680610df057610df0610d57565b600019019291505056fea2646970667358221220e6cee2a5726f129248139f9eacf6707d3bd3c7ce36cfd5a0fe1682e8dbbc798764736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
