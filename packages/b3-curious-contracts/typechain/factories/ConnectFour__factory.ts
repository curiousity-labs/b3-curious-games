/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    inputs: [],
    name: "SeasonOver",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "column",
        type: "uint256",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "row",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "teamNum",
        type: "uint8",
      },
    ],
    name: "didPlayerWin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gameId",
        type: "uint256",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160065534801561001557600080fd5b50610e41806100256000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806372fb97031161005057806372fb9703146100aa578063a2f77bcc146100cb578063ae5261301461014a57600080fd5b80631a2361e71461006c5780635e24b0f114610095575b600080fd5b61007f61007a366004610bd5565b61016d565b60405161008c9190610bee565b60405180910390f35b6100a86100a3366004610c68565b610208565b005b6100bd6100b8366004610c9b565b610523565b60405190815260200161008c565b6101146100d9366004610bd5565b6007602052600090815260409020805460018201546002909201546001600160a01b039182169282811692600160a01b90910460ff16911684565b604080516001600160a01b039586168152938516602085015260ff9092169183019190915291909116606082015260800161008c565b61015d610158366004610ccb565b610715565b604051901515815260200161008c565b610175610a89565b600082815260076020526040808220815160c081019092529091600390910190600690835b828210156101fd576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116101bb57905050505050508152602001906001019061019a565b505050509050919050565b60ff821660009081526007602052604090206002015482906001600160a01b031615610260576040517fdf469ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160068160ff161061029e576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff841660009081526007602052604081206001808201549192918291600160a01b90910416156102d05760016102d3565b60025b600180850154919250600160a01b90910416156102fa5782546001600160a01b0316610309565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b031614610353576040517fe60c8f5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068160ff1610156103d9576000846003018860ff166006811061037c5761037c610d1f565b018260ff166006811061039157610391610d1f565b602081049091015460ff601f9092166101000a900416905060008190036103c657816103bc81610d7d565b92509350506103d9565b50806103d181610d7d565b915050610356565b5080836003018760ff16600681106103f3576103f3610d1f565b018360ff166006811061040857610408610d1f565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600184018054600160a01b900490911690601461044983610d7d565b82546101009290920a60ff8181021990931691831602179091556040805133815291891660208301527f2080025c96ee0fbc95f61862d9ee484eff89fb949136b5e9d3f7db7fa92651aa92500160405180910390a16104aa87878484610715565b1561051a576002830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040805191825260ff891660208301527f27223f8d1d659564536abdf661d810b8a16ca4f6c69034f2a73b74b0853d9829910160405180910390a15b50505050505050565b6000816001600160a01b038116330361053b57600080fd5b6040805160a0810182523381526001600160a01b0385166020820152600081830181905260608201819052825160c0810190935291608082019083600681835b828210156105de576040805160c08101918290529085840190600690826000855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161059c57905050505050508152602001906001019061057b565b50505091525060068054600090815260076020908152604091829020845181546001600160a01b039182167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178355928601516001830180549588015160ff16600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090961691831691909117949094179093556060850151600282018054919094169216919091179091556080830151929350839290916106ab916003840191610ab6565b5050600654604080519182523360208301526001600160a01b038716908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e915060600160405180910390a16006805490600061070983610d9c565b90915550949350505050565b60ff8416600090815260076020526040812060030181610737828787876107af565b90508060ff1660040361074f576001925050506107a7565b600061075d8388888861087b565b90508060ff1660040361077657600193505050506107a7565b600061078484898989610932565b90508060ff1660040361079e5760019450505050506107a7565b60009450505050505b949350505050565b60006001816107be8683610db6565b90505b6107cc866006610dd5565b60ff168160ff161015610813576107e587828787610a38565b156107fc57816107f481610d7d565b925050610801565b610813565b8061080b81610d7d565b9150506107c1565b5060ff85161561087257600061082a600187610dd5565b90505b61083987828787610a38565b15610850578161084881610d7d565b925050610855565b610870565b60ff811615610870578061086881610dee565b91505061082d565b505b95945050505050565b600060018161088a8583610db6565b90505b610898856006610dd5565b60ff168160ff1610156108df576108b187878387610a38565b156108c857816108c081610d7d565b9250506108cd565b6108df565b806108d781610d7d565b91505061088d565b5060ff8416156108725760006108f6600186610dd5565b90505b61090587878387610a38565b15610850578161091481610d7d565b92505060ff811615610870578061092a81610dee565b9150506108f9565b60006001816109418583610db6565b90505b61094f856006610dd5565b60ff168160ff1610156109965761096887828387610a38565b1561097f578161097781610d7d565b925050610984565b610996565b8061098e81610d7d565b915050610944565b5060ff8416158015906109ab575060ff851615155b156108725760006109bd600186610dd5565b905060006109cc600188610dd5565b90505b6109db88828488610a38565b156109f257826109ea81610d7d565b9350506109f7565b610a2c565b60ff82161580610a08575060ff8116155b610a2c5781610a1681610dee565b9250508080610a2490610dee565b9150506109cf565b50509050949350505050565b60008160ff16858560ff1660068110610a5357610a53610d1f565b018460ff1660068110610a6857610a68610d1f565b602081049091015460ff601f9092166101000a900416149050949350505050565b6040518060c001604052806006905b610aa0610b00565b815260200190600190039081610a985790505090565b8260068101928215610af0579160200282015b82811115610af0578251610ae09083906006610b1e565b5091602001919060010190610ac9565b50610afc929150610bad565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610ba15791602002820160005b83821115610b7257835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610b34565b8015610b9f5782816101000a81549060ff0219169055600101602081600001049283019260010302610b72565b505b50610afc929150610bc1565b80821115610afc5760008155600101610bad565b80821115610afc5760008155600101610bad565b600060208284031215610be757600080fd5b5035919050565b610480810181836000805b6006808210610c085750610c48565b835185845b83811015610c2e57825160ff16825260209283019290910190600101610c0d565b50505060c094909401935060209290920191600101610bf9565b5050505092915050565b803560ff81168114610c6357600080fd5b919050565b60008060408385031215610c7b57600080fd5b610c8483610c52565b9150610c9260208401610c52565b90509250929050565b600060208284031215610cad57600080fd5b81356001600160a01b0381168114610cc457600080fd5b9392505050565b60008060008060808587031215610ce157600080fd5b610cea85610c52565b9350610cf860208601610c52565b9250610d0660408601610c52565b9150610d1460608601610c52565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103610d9357610d93610d4e565b60010192915050565b60006000198203610daf57610daf610d4e565b5060010190565b60ff8181168382160190811115610dcf57610dcf610d4e565b92915050565b60ff8281168282160390811115610dcf57610dcf610d4e565b600060ff821680610e0157610e01610d4e565b600019019291505056fea2646970667358221220294567d833c9c46e420168ac71c34704137881f6e6fb40c4e0d1cfc5f856f97764736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
