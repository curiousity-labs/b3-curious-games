/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    inputs: [],
    name: "SeasonOver",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e20806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635e24b0f11461005c57806372fb9703146100715780639b33b42914610084578063a2f77bcc146100ad578063d7c81b551461012b575b600080fd5b61006f61006a366004610c36565b610142565b005b61006f61007f366004610c69565b610428565b610097610092366004610c99565b61055e565b6040516100a49190610cb4565b60405180910390f35b6100f86100bb366004610d18565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100a4565b61013460005481565b6040519081526020016100a4565b60ff82166000818152600160205260409020600201546001600160a01b03161561017f5760405163df469ccb60e01b815260040160405180910390fd5b8160068160ff16106101a457604051631efccef760e11b815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b900416156101d65760016101d9565b60025b6002840154909150600160a01b9004600116156102005782546001600160a01b031661020f565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b03161461024057604051631cc191eb60e31b815260040160405180910390fd5b60005b60068160ff1610156102eb576000846003018260ff166006811061026957610269610d31565b018860ff166006811061027e5761027e610d31565b602081049091015460ff601f9092166101000a90048116915082166005036102b957604051631efccef760e11b815260040160405180910390fd5b8060ff166000036102d857816102ce81610d5d565b92509350506102eb565b50806102e381610d5d565b915050610243565b5080836003018360ff166006811061030557610305610d31565b018760ff166006811061031a5761031a610d31565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b900490911690601461035b83610d5d565b82546101009290920a60ff818102199093169183160217909155604080518a83168152336020820152918916908201527fa6f41f711ea470b4b237d1b3e43b201e53517677308ae067a273fb1948ddbf0c915060600160405180910390a16103c5878784846105fd565b1561041f576002830180546001600160a01b031916339081179091556040805160ff8a16815260208101929092527fb7f35e624e036288272fbf3342c09219261ff29fdddd826989b289134e9ae535910160405180910390a15b50505050505050565b806001600160a01b038116330361043e57600080fd5b610446610ad4565b6040805160a0810182523381526001600160a01b038581166020808401918252600084860181815260608601828152608087018981528354845260019485905297909220865181549087166001600160a01b03199182161782559451938101805494871694909516939093179093559151600282018054935160ff16600160a01b026001600160a81b03199094169190941617919091179091559151909182916104f69060038301906006610b01565b5050600054604080519182523360208301526001600160a01b038716908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e915060600160405180910390a160008054908061055383610d7c565b919050555050505050565b610566610ad4565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156105f2576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116105b057905050505050508152602001906001019061058f565b505050509050919050565b60008061060c8686868661069d565b905080600403610620576001915050610695565b600061062e87878787610769565b90508060040361064357600192505050610695565b600061065188888888610820565b9050806004036106675760019350505050610695565b600061067589898989610926565b90508060040361068c576001945050505050610695565b60009450505050505b949350505050565b60006001816106ac8683610d95565b90505b6106ba866006610db4565b60ff168160ff161015610701576106d387828787610a66565b156106ea57816106e281610d7c565b9250506106ef565b610701565b806106f981610d5d565b9150506106af565b5060ff851615610760576000610718600187610db4565b90505b61072787828787610a66565b1561073e578161073681610d7c565b925050610743565b61075e565b60ff81161561075e578061075681610dcd565b91505061071b565b505b95945050505050565b60006001816107788583610d95565b90505b610786856006610db4565b60ff168160ff1610156107cd5761079f87878387610a66565b156107b657816107ae81610d7c565b9250506107bb565b6107cd565b806107c581610d5d565b91505061077b565b5060ff8416156107605760006107e4600186610db4565b90505b6107f387878387610a66565b1561073e578161080281610d7c565b92505060ff81161561075e578061081881610dcd565b9150506107e7565b600060018161082f8583610d95565b90505b61083d856006610db4565b60ff168160ff1610156108845761085687828387610a66565b1561086d578161086581610d7c565b925050610872565b610884565b8061087c81610d5d565b915050610832565b5060ff841615801590610899575060ff851615155b156107605760006108ab600186610db4565b905060006108ba600188610db4565b90505b6108c988828488610a66565b156108e057826108d881610d7c565b9350506108e5565b61091a565b60ff821615806108f6575060ff8116155b61091a578161090481610dcd565b925050808061091290610dcd565b9150506108bd565b50509050949350505050565b6000600160ff84161580159061093e575060ff851615155b156109c4576000610950600186610db4565b9050600061095f876001610d95565b90505b61096e88828488610a66565b15610985578261097d81610d7c565b93505061098a565b6109c1565b60ff8216158061099d575060068160ff16115b6109c157816109ab81610dcd565b92505080806109b990610d5d565b915050610962565b50505b60ff8416158015906109d8575060ff851615155b156107605760006109ea856001610d95565b905060006109f9600188610db4565b90505b60078260ff161080610a0c575060015b1561091a57610a1d88828488610a66565b156108e05782610a2c81610d7c565b93505060068260ff161180610a42575060ff8116155b61091a5781610a5081610d5d565b9250508080610a5e90610dcd565b9150506109fc565b600080600160008760ff16815260200190815260200160002060030190508260ff16818560ff1660068110610a9d57610a9d610d31565b018660ff1660068110610ab257610ab2610d31565b602081049091015460ff601f9092166101000a90041614915050949350505050565b6040518060c001604052806006905b610aeb610b4b565b815260200190600190039081610ae35790505090565b8260068101928215610b3b579160200282015b82811115610b3b578251610b2b9083906006610b69565b5091602001919060010190610b14565b50610b47929150610bf8565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610bec5791602002820160005b83821115610bbd57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610b7f565b8015610bea5782816101000a81549060ff0219169055600101602081600001049283019260010302610bbd565b505b50610b47929150610c0c565b80821115610b475760008155600101610bf8565b80821115610b475760008155600101610bf8565b803560ff81168114610c3157600080fd5b919050565b60008060408385031215610c4957600080fd5b610c5283610c20565b9150610c6060208401610c20565b90509250929050565b600060208284031215610c7b57600080fd5b81356001600160a01b0381168114610c9257600080fd5b9392505050565b600060208284031215610cab57600080fd5b610c9282610c20565b610480810181836000805b6006808210610cce5750610d0e565b835185845b83811015610cf457825160ff16825260209283019290910190600101610cd3565b50505060c094909401935060209290920191600101610cbf565b5050505092915050565b600060208284031215610d2a57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103610d7357610d73610d47565b60010192915050565b600060018201610d8e57610d8e610d47565b5060010190565b60ff8181168382160190811115610dae57610dae610d47565b92915050565b60ff8281168282160390811115610dae57610dae610d47565b600060ff821680610de057610de0610d47565b600019019291505056fea264697066735822122056e0b6afa04b0b9b6245656e3580dc32944586687808d26f98bf3669cf4a56aa64736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
