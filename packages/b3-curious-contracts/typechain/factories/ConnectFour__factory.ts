/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    inputs: [],
    name: "SeasonOver",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "column",
        type: "uint256",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "row",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "teamNum",
        type: "uint8",
      },
    ],
    name: "didPlayerWin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gameId",
        type: "uint256",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160065534801561001557600080fd5b50610fe9806100256000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806372fb97031161005057806372fb9703146100aa578063a2f77bcc146100cb578063ae5261301461014a57600080fd5b80631a2361e71461006c5780635e24b0f114610095575b600080fd5b61007f61007a366004610d7d565b61016d565b60405161008c9190610d96565b60405180910390f35b6100a86100a3366004610e10565b610208565b005b6100bd6100b8366004610e43565b610561565b60405190815260200161008c565b6101146100d9366004610d7d565b6007602052600090815260409020805460018201546002909201546001600160a01b039182169282811692600160a01b90910460ff16911684565b604080516001600160a01b039586168152938516602085015260ff9092169183019190915291909116606082015260800161008c565b61015d610158366004610e73565b610753565b604051901515815260200161008c565b610175610c31565b600082815260076020526040808220815160c081019092529091600390910190600690835b828210156101fd576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116101bb57905050505050508152602001906001019061019a565b505050509050919050565b60ff821660009081526007602052604090206002015482906001600160a01b031615610260576040517fdf469ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160068160ff161061029e576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff841660009081526007602052604081206001808201549192918291600160a01b90910416156102d05760016102d3565b60025b600180850154919250600160a01b90910416156102fa5782546001600160a01b0316610309565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b031614610353576040517fe60c8f5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068160ff161015610417576000846003018860ff166006811061037c5761037c610ec7565b018260ff166006811061039157610391610ec7565b602081049091015460ff601f9092166101000a90048116915082166005036103e5576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff1660000361040457816103fa81610f25565b9250935050610417565b508061040f81610f25565b915050610356565b5080836003018760ff166006811061043157610431610ec7565b018360ff166006811061044657610446610ec7565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600184018054600160a01b900490911690601461048783610f25565b82546101009290920a60ff8181021990931691831602179091556040805133815291891660208301527f2080025c96ee0fbc95f61862d9ee484eff89fb949136b5e9d3f7db7fa92651aa92500160405180910390a16104e887878484610753565b15610558576002830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040805191825260ff891660208301527f27223f8d1d659564536abdf661d810b8a16ca4f6c69034f2a73b74b0853d9829910160405180910390a15b50505050505050565b6000816001600160a01b038116330361057957600080fd5b6040805160a0810182523381526001600160a01b0385166020820152600081830181905260608201819052825160c0810190935291608082019083600681835b8282101561061c576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116105da5790505050505050815260200190600101906105b9565b50505091525060068054600090815260076020908152604091829020845181546001600160a01b039182167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178355928601516001830180549588015160ff16600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090961691831691909117949094179093556060850151600282018054919094169216919091179091556080830151929350839290916106e9916003840191610c5e565b5050600654604080519182523360208301526001600160a01b038716908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e915060600160405180910390a16006805490600061074783610f44565b90915550949350505050565b60ff841660009081526007602052604081206003018161077582878787610817565b90508060ff1660040361078d5760019250505061080f565b600061079b838888886108e3565b90508060ff166004036107b4576001935050505061080f565b60006107c28489898961099a565b90508060ff166004036107dc57600194505050505061080f565b60006107ea858a8a8a610aa0565b90508060ff166004036108055760019550505050505061080f565b6000955050505050505b949350505050565b60006001816108268683610f5e565b90505b610834866006610f7d565b60ff168160ff16101561087b5761084d87828787610be0565b15610864578161085c81610f25565b925050610869565b61087b565b8061087381610f25565b915050610829565b5060ff8516156108da576000610892600187610f7d565b90505b6108a187828787610be0565b156108b857816108b081610f25565b9250506108bd565b6108d8565b60ff8116156108d857806108d081610f96565b915050610895565b505b95945050505050565b60006001816108f28583610f5e565b90505b610900856006610f7d565b60ff168160ff1610156109475761091987878387610be0565b15610930578161092881610f25565b925050610935565b610947565b8061093f81610f25565b9150506108f5565b5060ff8416156108da57600061095e600186610f7d565b90505b61096d87878387610be0565b156108b8578161097c81610f25565b92505060ff8116156108d8578061099281610f96565b915050610961565b60006001816109a98583610f5e565b90505b6109b7856006610f7d565b60ff168160ff1610156109fe576109d087828387610be0565b156109e757816109df81610f25565b9250506109ec565b6109fe565b806109f681610f25565b9150506109ac565b5060ff841615801590610a13575060ff851615155b156108da576000610a25600186610f7d565b90506000610a34600188610f7d565b90505b610a4388828488610be0565b15610a5a5782610a5281610f25565b935050610a5f565b610a94565b60ff82161580610a70575060ff8116155b610a945781610a7e81610f96565b9250508080610a8c90610f96565b915050610a37565b50509050949350505050565b6000600160ff841615801590610ab8575060ff851615155b15610b3e576000610aca600186610f7d565b90506000610ad9876001610f5e565b90505b610ae888828488610be0565b15610aff5782610af781610f25565b935050610b04565b610b3b565b60ff82161580610b17575060068160ff16115b610b3b5781610b2581610f96565b9250508080610b3390610f25565b915050610adc565b50505b60ff841615801590610b52575060ff851615155b156108da576000610b64856001610f5e565b90506000610b73600188610f7d565b90505b60078260ff161080610b86575060015b15610a9457610b9788828488610be0565b15610a5a5782610ba681610f25565b93505060068260ff161180610bbc575060ff8116155b610a945781610bca81610f25565b9250508080610bd890610f96565b915050610b76565b60008160ff16858560ff1660068110610bfb57610bfb610ec7565b018460ff1660068110610c1057610c10610ec7565b602081049091015460ff601f9092166101000a900416149050949350505050565b6040518060c001604052806006905b610c48610ca8565b815260200190600190039081610c405790505090565b8260068101928215610c98579160200282015b82811115610c98578251610c889083906006610cc6565b5091602001919060010190610c71565b50610ca4929150610d55565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610d495791602002820160005b83821115610d1a57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610cdc565b8015610d475782816101000a81549060ff0219169055600101602081600001049283019260010302610d1a565b505b50610ca4929150610d69565b80821115610ca45760008155600101610d55565b80821115610ca45760008155600101610d55565b600060208284031215610d8f57600080fd5b5035919050565b610480810181836000805b6006808210610db05750610df0565b835185845b83811015610dd657825160ff16825260209283019290910190600101610db5565b50505060c094909401935060209290920191600101610da1565b5050505092915050565b803560ff81168114610e0b57600080fd5b919050565b60008060408385031215610e2357600080fd5b610e2c83610dfa565b9150610e3a60208401610dfa565b90509250929050565b600060208284031215610e5557600080fd5b81356001600160a01b0381168114610e6c57600080fd5b9392505050565b60008060008060808587031215610e8957600080fd5b610e9285610dfa565b9350610ea060208601610dfa565b9250610eae60408601610dfa565b9150610ebc60608601610dfa565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103610f3b57610f3b610ef6565b60010192915050565b60006000198203610f5757610f57610ef6565b5060010190565b60ff8181168382160190811115610f7757610f77610ef6565b92915050565b60ff8281168282160390811115610f7757610f77610ef6565b600060ff821680610fa957610fa9610ef6565b600019019291505056fea264697066735822122048503937b925a435b1a724f1ca2369b13758c308ce8d9e7fa6b370444eb3679b64736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
