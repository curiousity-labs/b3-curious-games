/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    inputs: [],
    name: "SeasonOver",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "gameId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "gameId",
        type: "uint8",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameId",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff1916600117905534801561001d57600080fd5b50610f208061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806377d79d101161005057806377d79d10146100ab5780639b33b42914610129578063d7c81b551461014957600080fd5b80635e24b0f11461006c57806372fb970314610081575b600080fd5b61007f61007a366004610d18565b610156565b005b61009461008f366004610d4b565b6104af565b60405160ff90911681526020015b60405180910390f35b6100f66100b9366004610d7b565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100a2565b61013c610137366004610d7b565b610639565b6040516100a29190610d96565b6000546100949060ff1681565b60ff821660009081526001602052604090206002015482906001600160a01b0316156101ae576040517fdf469ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160068160ff16106101ec576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b9004161561021e576001610221565b60025b6002840154909150600160a01b9004600116156102485782546001600160a01b0316610257565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b0316146102a1576040517fe60c8f5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068160ff161015610365576000846003018860ff16600681106102ca576102ca610dfa565b018260ff16600681106102df576102df610dfa565b602081049091015460ff601f9092166101000a9004811691508216600503610333576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff16600003610352578161034881610e58565b9250935050610365565b508061035d81610e58565b9150506102a4565b5080836003018760ff166006811061037f5761037f610dfa565b018360ff166006811061039457610394610dfa565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b90049091169060146103d583610e58565b82546101009290920a60ff8181021990931691831602179091556040805133815291891660208301527fa638f1c7a9f6a51af6b7475b0a380aedc2d796a73232ab384d88ba2c48e9038692500160405180910390a1610436878784846106d8565b156104a6576002830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040805191825260ff891660208301527fb6ab6ec5502355d4358cbc04aadd389e633dd1de77a3e4d93d76ddcbc46f52be910160405180910390a15b50505050505050565b6000816001600160a01b03811633036104c757600080fd5b6104cf610bb6565b6040805160a0810182523381526001600160a01b03868116602080840191825260008486018181526060860182815260808701898152835460ff908116855260019586905298909320875181549088167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178255955194810180549588169590961694909417909455516002830180549451909716600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009094169416939093179190911790935551909182916105b39060038301906006610be3565b50506000546040805160ff90921682523360208301526001600160a01b038816908201527ffacb992b0f97ca4fcf8e7bae286dbf794116195c3b4e316d585ccbf61474f2ba915060600160405180910390a16000805460ff16908061061783610e58565b91906101000a81548160ff021916908360ff1602179055509350505050919050565b610641610bb6565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156106cd576040805160c08101918290529085840190600690826000855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161068b57905050505050508152602001906001019061066a565b505050509050919050565b60ff84166000908152600160205260408120600301816106fa8287878761079c565b90508060ff1660040361071257600192505050610794565b600061072083888888610868565b90508060ff166004036107395760019350505050610794565b60006107478489898961091f565b90508060ff16600403610761576001945050505050610794565b600061076f858a8a8a610a25565b90508060ff1660040361078a57600195505050505050610794565b6000955050505050505b949350505050565b60006001816107ab8683610e77565b90505b6107b9866006610e96565b60ff168160ff161015610800576107d287828787610b65565b156107e957816107e181610e58565b9250506107ee565b610800565b806107f881610e58565b9150506107ae565b5060ff85161561085f576000610817600187610e96565b90505b61082687828787610b65565b1561083d578161083581610e58565b925050610842565b61085d565b60ff81161561085d578061085581610eaf565b91505061081a565b505b95945050505050565b60006001816108778583610e77565b90505b610885856006610e96565b60ff168160ff1610156108cc5761089e87878387610b65565b156108b557816108ad81610e58565b9250506108ba565b6108cc565b806108c481610e58565b91505061087a565b5060ff84161561085f5760006108e3600186610e96565b90505b6108f287878387610b65565b1561083d578161090181610e58565b92505060ff81161561085d578061091781610eaf565b9150506108e6565b600060018161092e8583610e77565b90505b61093c856006610e96565b60ff168160ff1610156109835761095587828387610b65565b1561096c578161096481610e58565b925050610971565b610983565b8061097b81610e58565b915050610931565b5060ff841615801590610998575060ff851615155b1561085f5760006109aa600186610e96565b905060006109b9600188610e96565b90505b6109c888828488610b65565b156109df57826109d781610e58565b9350506109e4565b610a19565b60ff821615806109f5575060ff8116155b610a195781610a0381610eaf565b9250508080610a1190610eaf565b9150506109bc565b50509050949350505050565b6000600160ff841615801590610a3d575060ff851615155b15610ac3576000610a4f600186610e96565b90506000610a5e876001610e77565b90505b610a6d88828488610b65565b15610a845782610a7c81610e58565b935050610a89565b610ac0565b60ff82161580610a9c575060068160ff16115b610ac05781610aaa81610eaf565b9250508080610ab890610e58565b915050610a61565b50505b60ff841615801590610ad7575060ff851615155b1561085f576000610ae9856001610e77565b90506000610af8600188610e96565b90505b60078260ff161080610b0b575060015b15610a1957610b1c88828488610b65565b156109df5782610b2b81610e58565b93505060068260ff161180610b41575060ff8116155b610a195781610b4f81610e58565b9250508080610b5d90610eaf565b915050610afb565b60008160ff16858560ff1660068110610b8057610b80610dfa565b018460ff1660068110610b9557610b95610dfa565b602081049091015460ff601f9092166101000a900416149050949350505050565b6040518060c001604052806006905b610bcd610c2d565b815260200190600190039081610bc55790505090565b8260068101928215610c1d579160200282015b82811115610c1d578251610c0d9083906006610c4b565b5091602001919060010190610bf6565b50610c29929150610cda565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610cce5791602002820160005b83821115610c9f57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610c61565b8015610ccc5782816101000a81549060ff0219169055600101602081600001049283019260010302610c9f565b505b50610c29929150610cee565b80821115610c295760008155600101610cda565b80821115610c295760008155600101610cda565b803560ff81168114610d1357600080fd5b919050565b60008060408385031215610d2b57600080fd5b610d3483610d02565b9150610d4260208401610d02565b90509250929050565b600060208284031215610d5d57600080fd5b81356001600160a01b0381168114610d7457600080fd5b9392505050565b600060208284031215610d8d57600080fd5b610d7482610d02565b610480810181836000805b6006808210610db05750610df0565b835185845b83811015610dd657825160ff16825260209283019290910190600101610db5565b50505060c094909401935060209290920191600101610da1565b5050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103610e6e57610e6e610e29565b60010192915050565b60ff8181168382160190811115610e9057610e90610e29565b92915050565b60ff8281168282160390811115610e9057610e90610e29565b600060ff821680610ec257610ec2610e29565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019291505056fea264697066735822122078733733ea1512508918a4a4a7f4e1bb68c16868836d0a5b2fd3b276c57fa0a064736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
