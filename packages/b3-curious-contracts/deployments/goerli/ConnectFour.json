{
  "address": "0x5B400d1305fEd901116e2779130c2F161447BF9F",
  "abi": [
    {
      "inputs": [],
      "name": "GameOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSelection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourTurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SeasonOver",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "gameId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "teamOne",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "teamTwo",
          "type": "address"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "gameId",
          "type": "uint8"
        }
      ],
      "name": "GameFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "team",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "column",
          "type": "uint8"
        }
      ],
      "name": "TurnTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        }
      ],
      "name": "challenge",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "teamOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "teamTwo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "turn",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gameId",
          "type": "uint8"
        }
      ],
      "name": "getGameBoard",
      "outputs": [
        {
          "internalType": "uint8[6][6]",
          "name": "",
          "type": "uint8[6][6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gameId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "column",
          "type": "uint8"
        }
      ],
      "name": "makeMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98d36db27cd80fc0adf39e6533cd3737b1b5191a1e6c9b0ed4b950ddef76f905",
  "receipt": {
    "to": null,
    "from": "0x629750317d320B8bB4d48D345A6d699Cc855c4a6",
    "contractAddress": "0x5B400d1305fEd901116e2779130c2F161447BF9F",
    "transactionIndex": 24,
    "gasUsed": "900587",
    "logsBloom": "0x
    "blockHash": "0xe0e69ffed8fc9da1fed69b8aee47cd0276b2bedc852afba008840d4857dab46a",
    "transactionHash": "0x98d36db27cd80fc0adf39e6533cd3737b1b5191a1e6c9b0ed4b950ddef76f905",
    "logs": [],
    "blockNumber": 8307268,
    "cumulativeGasUsed": "10377668",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f8833746c076fd78c143eb631c454352",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"GameOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSelection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourTurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SeasonOver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"gameId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamOne\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamTwo\",\"type\":\"address\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"gameId\",\"type\":\"uint8\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"column\",\"type\":\"uint8\"}],\"name\":\"TurnTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"}],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"teamOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"turn\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameId\",\"type\":\"uint8\"}],\"name\":\"getGameBoard\",\"outputs\":[{\"internalType\":\"uint8[6][6]\",\"name\":\"\",\"type\":\"uint8[6][6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"column\",\"type\":\"uint8\"}],\"name\":\"makeMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"challenge(address)\":{\"details\":\"opponent will go firstgame id is increated each time a new game is createdseason is over when timer (soon to be added) is past\",\"params\":{\"opponent\":\"challened\"}},\"makeMove(uint8,uint8)\":{\"params\":{\"_gameId\":\"id of game\",\"column\":\"selected column for move\"}}},\"stateVariables\":{\"gameId\":{\"details\":\"Initialised at 1 because it makes the first transaction slightly cheaper.\"},\"getGame\":{\"details\":\"This automatically generates a getter for us, which will return `Game.player1`, `Game.player2`, `Game.moves`, and `Game.finished` (the arrays are skipped)\"}},\"version\":1},\"userdoc\":{\"errors\":{\"GameOver()\":[{\"notice\":\"revert if game has been completed\"}],\"InvalidSelection()\":[{\"notice\":\"revert if column choice is invalid\"}],\"NotYourTurn()\":[{\"notice\":\"revert if caller isn't current team\"}],\"SeasonOver()\":[{\"notice\":\"revert season is over (coming soon)\"}]},\"events\":{\"GameCreated(uint8,address,address)\":{\"notice\":\"emiited when game is created\"},\"GameFinished(address,uint8)\":{\"notice\":\"emitted when game is complete\"},\"TurnTaken(address,uint8)\":{\"notice\":\"emitted after turn is successfully taken\"}},\"kind\":\"user\",\"methods\":{\"challenge(address)\":{\"notice\":\"challenge an address to a game of connect four\"},\"getGame(uint8)\":{\"notice\":\"An indexed list of games\"},\"makeMove(uint8,uint8)\":{\"notice\":\"current team plays a turn\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConnectFour.sol\":\"ConnectFour\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/ConnectFour.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\ncontract ConnectFour {\\n    /// @notice revert if caller isn't current team\\n    error NotYourTurn();\\n    /// @notice revert if column choice is invalid\\n    error InvalidSelection();\\n    /// @notice revert if game has been completed\\n    error GameOver();\\n    /// @notice revert season is over (coming soon)\\n    error SeasonOver();\\n\\n    /// @notice emiited when game is created\\n    event GameCreated(uint8 gameId, address teamOne, address teamTwo);\\n    /// @notice emitted after turn is successfully taken\\n    event TurnTaken(address team, uint8 column);\\n    /// @notice emitted when game is complete\\n    event GameFinished(address winner, uint8 gameId);\\n\\n    /// @notice holds game data\\n    /// @param teamOne address of challenger\\n    /// @param teamTwo address of challenged\\n    /// @param winner address of winning team; default: address(0)\\n    /// @param turn current turn is calculated using bitwise for basically odd/even teamOne/teamTwo\\n    /// @param board holds game board data; each 'square' holds current data; 0 = no chip; 1 = team one; 2 = team two\\n    struct Game {\\n        address teamOne;\\n        address teamTwo;\\n        address winner;\\n        uint8 turn;\\n        uint8[6][6] board;\\n    }\\n\\n    /// @notice Used as a counter for the next game index.\\n    /// @dev Initialised at 1 because it makes the first transaction slightly cheaper.\\n    uint8 internal gameId = 1;\\n\\n    /// @notice An indexed list of games\\n    /// @dev This automatically generates a getter for us, which will return `Game.player1`, `Game.player2`, `Game.moves`, and `Game.finished` (the arrays are skipped)\\n    mapping(uint8 => Game) public getGame;\\n\\n    /// @notice prevent move if column is invalid\\n    modifier validColumn(uint8 column) {\\n        if (column >= 6) revert InvalidSelection();\\n        _;\\n    }\\n\\n    /// @notice prevents gameplay if game is over\\n    modifier gameOver(uint8 _gameId) {\\n        if (getGame[_gameId].winner != address(0)) revert GameOver();\\n        _;\\n    }\\n\\n    /// @notice prevents new games when season is over. (coming soon)\\n    modifier seasonOver() {\\n        _;\\n    }\\n\\n    /// @notice prevents teams being the same address\\n    modifier uniqueTeams(address opponent) {\\n        require(msg.sender != opponent);\\n        _;\\n    }\\n\\n    /**\\n     * @notice challenge an address to a game of connect four\\n     * @param opponent challened\\n     * @dev opponent will go first\\n     * @dev game id is increated each time a new game is created\\n     * @dev season is over when timer (soon to be added) is past\\n     */\\n    function challenge(\\n        address opponent\\n    ) public uniqueTeams(opponent) returns (uint8) {\\n        uint8[6][6] memory newBoard;\\n        Game memory newGame = Game({\\n            teamOne: msg.sender,\\n            teamTwo: opponent,\\n            turn: uint8(0),\\n            winner: address(0),\\n            board: newBoard\\n        });\\n\\n        getGame[gameId] = newGame;\\n\\n        emit GameCreated(gameId, msg.sender, opponent);\\n\\n        return gameId++;\\n    }\\n\\n    /**\\n     * @notice current team plays a turn\\n     * @param _gameId id of game\\n     * @param column selected column for move\\n     */\\n    function makeMove(\\n        uint8 _gameId,\\n        uint8 column\\n    ) external gameOver(_gameId) validColumn(column) {\\n        Game storage game = getGame[_gameId];\\n\\n        /// @notice row where chip will land\\n        uint8 row;\\n        /// @notice assigned team number for squares\\n        uint8 teamNum = game.turn & 1 == 0 ? 2 : 1;\\n\\n        /// @notice prevents plays being made by other addresses\\n        /// @dev even or odd bitwise operator decides turn\\n        /// @dev starts with team two\\n        if (msg.sender != (game.turn & 1 == 0 ? game.teamTwo : game.teamOne)) {\\n            revert NotYourTurn();\\n        }\\n\\n        /// @notice finds where chip will land\\n        for (uint8 i = 0; i < 6; i++) {\\n            uint8 square = game.board[column][i];\\n            if (i == 5) {\\n                revert InvalidSelection();\\n            }\\n            if (square == 0) {\\n                row = i++;\\n                break;\\n            }\\n        }\\n\\n        /// @notice assigns chip to location onboard\\n        game.board[column][row] = teamNum;\\n        /// @notice increments turn\\n        game.turn++;\\n\\n        emit TurnTaken(msg.sender, column);\\n\\n        /// @notice checks surrounding squares for connected pieces\\n        if (didPlayerWin(_gameId, column, row, teamNum)) {\\n            game.winner = msg.sender;\\n            emit GameFinished(msg.sender, _gameId);\\n        }\\n    }\\n\\n    /// @notice checks square for team's chip\\n    /// @param board game board data\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkSquare(\\n        uint8[6][6] storage board,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (bool) {\\n        return board[column][row] == teamNum;\\n    }\\n\\n    /// @notice checks the horizontal win\\n    /// @param board game board data\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkHorizonalWin(\\n        uint8[6][6] storage board,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint8) {\\n        uint8 connectedPiecesCount = 1;\\n\\n        /// @dev checks to the right of new piece\\n        for (uint8 i = column + 1; i < 6 - column; i++) {\\n            if (checkSquare(board, i, row, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n        /// @dev checks to the left of new piece\\n        if (column != 0) {\\n            uint8 columnIndex = column - 1;\\n            while (columnIndex >= 0) {\\n                if (checkSquare(board, columnIndex, row, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (columnIndex == 0) {\\n                    break;\\n                } else {\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the veritical win\\n    /// @param board game board data\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkVericalWin(\\n        uint8[6][6] storage board,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint8) {\\n        uint8 connectedPiecesCount = 1;\\n\\n        /// @dev checks rows above new piece\\n        for (uint8 i = row + 1; i < 6 - row; i++) {\\n            if (checkSquare(board, column, i, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n        /// @dev checks rows below new piece\\n        if (row != 0) {\\n            uint8 rowIndex = row - 1;\\n            while (rowIndex >= 0) {\\n                if (checkSquare(board, column, rowIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the forward angle win\\n    /// @param board game board data\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkForwardAngleWin(\\n        uint8[6][6] storage board,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint8) {\\n        uint8 connectedPiecesCount = 1;\\n\\n        /// @dev checks forward angle up\\n        for (uint8 i = row + 1; i < 6 - row; i++) {\\n            if (checkSquare(board, i, i, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        /// @dev checks forward angle down\\n        if (row != 0 && column != 0) {\\n            uint8 rowIndex = row - 1;\\n            uint8 columnIndex = column - 1;\\n            while (rowIndex >= 0 || columnIndex >= 0) {\\n                if (checkSquare(board, columnIndex, rowIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0 || columnIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the backward angle win\\n    /// @param board game board data\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkBackwardAngleWin(\\n        uint8[6][6] storage board,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint8) {\\n        uint8 connectedPiecesCount = 1;\\n\\n        /// @dev checks backward angle down\\n        if (row != 0 && column != 0) {\\n            uint8 rowIndex = row - 1;\\n            uint8 columnIndex = column + 1;\\n            while (rowIndex >= 0 || columnIndex < 7) {\\n                if (checkSquare(board, columnIndex, rowIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0 || columnIndex > 6) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                    columnIndex++;\\n                }\\n            }\\n        }\\n\\n        /// @dev checks forward angle down\\n        if (row != 0 && column != 0) {\\n            uint8 rowIndex = row + 1;\\n            uint8 columnIndex = column - 1;\\n            while (rowIndex < 7 || columnIndex >= 0) {\\n                if (checkSquare(board, columnIndex, rowIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex > 6 || columnIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex++;\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks to see if current play won the game\\n    function didPlayerWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (bool) {\\n        uint8[6][6] storage board = getGame[_gameId].board;\\n        /// @dev using new chip location as middle == m\\n        /// @dev [ [ C+1 | R-1 ] [  C+1  ] [ C+1 | R+1 ] ]\\n        /// @dev [ [    R-1    ] [ C | R ] [    R+1    ]\\n        /// @dev [ [ C-1 | R-1 ] [  C-1  ] [ C-1 | R+1 ] ]\\n\\n        uint8 horionalCount = checkHorizonalWin(board, column, row, teamNum);\\n        if (horionalCount == 4) {\\n            return true;\\n        }\\n        uint8 vericalCount = checkVericalWin(board, column, row, teamNum);\\n        if (vericalCount == 4) {\\n            return true;\\n        }\\n        uint8 forwardAngleCount = checkForwardAngleWin(\\n            board,\\n            column,\\n            row,\\n            teamNum\\n        );\\n        if (forwardAngleCount == 4) {\\n            return true;\\n        }\\n        uint8 backwardAngleCount = checkBackwardAngleWin(\\n            board,\\n            column,\\n            row,\\n            teamNum\\n        );\\n        if (backwardAngleCount == 4) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getGameBoard(\\n        uint8 _gameId\\n    ) public view returns (uint8[6][6] memory) {\\n        return getGame[_gameId].board;\\n    }\\n}\\n\",\"keccak256\":\"0x1d821df88ea6a52669a3867738ed8a9606452faa4e85ee49401be0792a36a985\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000805460ff1916600117905534801561001d57600080fd5b50610ef88061002d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635e24b0f11461005157806372fb97031461006657806377d79d10146100905780639b33b4291461010e575b600080fd5b61006461005f366004610cf0565b61012e565b005b610079610074366004610d23565b610487565b60405160ff90911681526020015b60405180910390f35b6100db61009e366004610d53565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff9091166060820152608001610087565b61012161011c366004610d53565b610611565b6040516100879190610d6e565b60ff821660009081526001602052604090206002015482906001600160a01b031615610186576040517fdf469ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160068160ff16106101c4576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b900416156101f65760016101f9565b60025b6002840154909150600160a01b9004600116156102205782546001600160a01b031661022f565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b031614610279576040517fe60c8f5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068160ff16101561033d576000846003018860ff16600681106102a2576102a2610dd2565b018260ff16600681106102b7576102b7610dd2565b602081049091015460ff601f9092166101000a900481169150821660050361030b576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff1660000361032a578161032081610e30565b925093505061033d565b508061033581610e30565b91505061027c565b5080836003018760ff166006811061035757610357610dd2565b018360ff166006811061036c5761036c610dd2565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b90049091169060146103ad83610e30565b82546101009290920a60ff8181021990931691831602179091556040805133815291891660208301527fa638f1c7a9f6a51af6b7475b0a380aedc2d796a73232ab384d88ba2c48e9038692500160405180910390a161040e878784846106b0565b1561047e576002830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040805191825260ff891660208301527fb6ab6ec5502355d4358cbc04aadd389e633dd1de77a3e4d93d76ddcbc46f52be910160405180910390a15b50505050505050565b6000816001600160a01b038116330361049f57600080fd5b6104a7610b8e565b6040805160a0810182523381526001600160a01b03868116602080840191825260008486018181526060860182815260808701898152835460ff908116855260019586905298909320875181549088167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178255955194810180549588169590961694909417909455516002830180549451909716600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090941694169390931791909117909355519091829161058b9060038301906006610bbb565b50506000546040805160ff90921682523360208301526001600160a01b038816908201527ffacb992b0f97ca4fcf8e7bae286dbf794116195c3b4e316d585ccbf61474f2ba915060600160405180910390a16000805460ff1690806105ef83610e30565b91906101000a81548160ff021916908360ff1602179055509350505050919050565b610619610b8e565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156106a5576040805160c08101918290529085840190600690826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610663579050505050505081526020019060010190610642565b505050509050919050565b60ff84166000908152600160205260408120600301816106d282878787610774565b90508060ff166004036106ea5760019250505061076c565b60006106f883888888610840565b90508060ff16600403610711576001935050505061076c565b600061071f848989896108f7565b90508060ff1660040361073957600194505050505061076c565b6000610747858a8a8a6109fd565b90508060ff166004036107625760019550505050505061076c565b6000955050505050505b949350505050565b60006001816107838683610e4f565b90505b610791866006610e6e565b60ff168160ff1610156107d8576107aa87828787610b3d565b156107c157816107b981610e30565b9250506107c6565b6107d8565b806107d081610e30565b915050610786565b5060ff8516156108375760006107ef600187610e6e565b90505b6107fe87828787610b3d565b15610815578161080d81610e30565b92505061081a565b610835565b60ff811615610835578061082d81610e87565b9150506107f2565b505b95945050505050565b600060018161084f8583610e4f565b90505b61085d856006610e6e565b60ff168160ff1610156108a45761087687878387610b3d565b1561088d578161088581610e30565b925050610892565b6108a4565b8061089c81610e30565b915050610852565b5060ff8416156108375760006108bb600186610e6e565b90505b6108ca87878387610b3d565b1561081557816108d981610e30565b92505060ff81161561083557806108ef81610e87565b9150506108be565b60006001816109068583610e4f565b90505b610914856006610e6e565b60ff168160ff16101561095b5761092d87828387610b3d565b15610944578161093c81610e30565b925050610949565b61095b565b8061095381610e30565b915050610909565b5060ff841615801590610970575060ff851615155b15610837576000610982600186610e6e565b90506000610991600188610e6e565b90505b6109a088828488610b3d565b156109b757826109af81610e30565b9350506109bc565b6109f1565b60ff821615806109cd575060ff8116155b6109f157816109db81610e87565b92505080806109e990610e87565b915050610994565b50509050949350505050565b6000600160ff841615801590610a15575060ff851615155b15610a9b576000610a27600186610e6e565b90506000610a36876001610e4f565b90505b610a4588828488610b3d565b15610a5c5782610a5481610e30565b935050610a61565b610a98565b60ff82161580610a74575060068160ff16115b610a985781610a8281610e87565b9250508080610a9090610e30565b915050610a39565b50505b60ff841615801590610aaf575060ff851615155b15610837576000610ac1856001610e4f565b90506000610ad0600188610e6e565b90505b60078260ff161080610ae3575060015b156109f157610af488828488610b3d565b156109b75782610b0381610e30565b93505060068260ff161180610b19575060ff8116155b6109f15781610b2781610e30565b9250508080610b3590610e87565b915050610ad3565b60008160ff16858560ff1660068110610b5857610b58610dd2565b018460ff1660068110610b6d57610b6d610dd2565b602081049091015460ff601f9092166101000a900416149050949350505050565b6040518060c001604052806006905b610ba5610c05565b815260200190600190039081610b9d5790505090565b8260068101928215610bf5579160200282015b82811115610bf5578251610be59083906006610c23565b5091602001919060010190610bce565b50610c01929150610cb2565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610ca65791602002820160005b83821115610c7757835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610c39565b8015610ca45782816101000a81549060ff0219169055600101602081600001049283019260010302610c77565b505b50610c01929150610cc6565b80821115610c015760008155600101610cb2565b80821115610c015760008155600101610cb2565b803560ff81168114610ceb57600080fd5b919050565b60008060408385031215610d0357600080fd5b610d0c83610cda565b9150610d1a60208401610cda565b90509250929050565b600060208284031215610d3557600080fd5b81356001600160a01b0381168114610d4c57600080fd5b9392505050565b600060208284031215610d6557600080fd5b610d4c82610cda565b610480810181836000805b6006808210610d885750610dc8565b835185845b83811015610dae57825160ff16825260209283019290910190600101610d8d565b50505060c094909401935060209290920191600101610d79565b5050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103610e4657610e46610e01565b60010192915050565b60ff8181168382160190811115610e6857610e68610e01565b92915050565b60ff8281168282160390811115610e6857610e68610e01565b600060ff821680610e9a57610e9a610e01565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019291505056fea2646970667358221220c1ca77468a2fd4009dfdbf25722caeb94c4b09ed36626bf29bfe0ffc494a4da064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80635e24b0f11461005157806372fb97031461006657806377d79d10146100905780639b33b4291461010e575b600080fd5b61006461005f366004610cf0565b61012e565b005b610079610074366004610d23565b610487565b60405160ff90911681526020015b60405180910390f35b6100db61009e366004610d53565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff9091166060820152608001610087565b61012161011c366004610d53565b610611565b6040516100879190610d6e565b60ff821660009081526001602052604090206002015482906001600160a01b031615610186576040517fdf469ccb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160068160ff16106101c4576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b900416156101f65760016101f9565b60025b6002840154909150600160a01b9004600116156102205782546001600160a01b031661022f565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b031614610279576040517fe60c8f5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068160ff16101561033d576000846003018860ff16600681106102a2576102a2610dd2565b018260ff16600681106102b7576102b7610dd2565b602081049091015460ff601f9092166101000a900481169150821660050361030b576040517f3df99dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060ff1660000361032a578161032081610e30565b925093505061033d565b508061033581610e30565b91505061027c565b5080836003018760ff166006811061035757610357610dd2565b018360ff166006811061036c5761036c610dd2565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b90049091169060146103ad83610e30565b82546101009290920a60ff8181021990931691831602179091556040805133815291891660208301527fa638f1c7a9f6a51af6b7475b0a380aedc2d796a73232ab384d88ba2c48e9038692500160405180910390a161040e878784846106b0565b1561047e576002830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040805191825260ff891660208301527fb6ab6ec5502355d4358cbc04aadd389e633dd1de77a3e4d93d76ddcbc46f52be910160405180910390a15b50505050505050565b6000816001600160a01b038116330361049f57600080fd5b6104a7610b8e565b6040805160a0810182523381526001600160a01b03868116602080840191825260008486018181526060860182815260808701898152835460ff908116855260019586905298909320875181549088167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178255955194810180549588169590961694909417909455516002830180549451909716600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090941694169390931791909117909355519091829161058b9060038301906006610bbb565b50506000546040805160ff90921682523360208301526001600160a01b038816908201527ffacb992b0f97ca4fcf8e7bae286dbf794116195c3b4e316d585ccbf61474f2ba915060600160405180910390a16000805460ff1690806105ef83610e30565b91906101000a81548160ff021916908360ff1602179055509350505050919050565b610619610b8e565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156106a5576040805160c08101918290529085840190600690826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610663579050505050505081526020019060010190610642565b505050509050919050565b60ff84166000908152600160205260408120600301816106d282878787610774565b90508060ff166004036106ea5760019250505061076c565b60006106f883888888610840565b90508060ff16600403610711576001935050505061076c565b600061071f848989896108f7565b90508060ff1660040361073957600194505050505061076c565b6000610747858a8a8a6109fd565b90508060ff166004036107625760019550505050505061076c565b6000955050505050505b949350505050565b60006001816107838683610e4f565b90505b610791866006610e6e565b60ff168160ff1610156107d8576107aa87828787610b3d565b156107c157816107b981610e30565b9250506107c6565b6107d8565b806107d081610e30565b915050610786565b5060ff8516156108375760006107ef600187610e6e565b90505b6107fe87828787610b3d565b15610815578161080d81610e30565b92505061081a565b610835565b60ff811615610835578061082d81610e87565b9150506107f2565b505b95945050505050565b600060018161084f8583610e4f565b90505b61085d856006610e6e565b60ff168160ff1610156108a45761087687878387610b3d565b1561088d578161088581610e30565b925050610892565b6108a4565b8061089c81610e30565b915050610852565b5060ff8416156108375760006108bb600186610e6e565b90505b6108ca87878387610b3d565b1561081557816108d981610e30565b92505060ff81161561083557806108ef81610e87565b9150506108be565b60006001816109068583610e4f565b90505b610914856006610e6e565b60ff168160ff16101561095b5761092d87828387610b3d565b15610944578161093c81610e30565b925050610949565b61095b565b8061095381610e30565b915050610909565b5060ff841615801590610970575060ff851615155b15610837576000610982600186610e6e565b90506000610991600188610e6e565b90505b6109a088828488610b3d565b156109b757826109af81610e30565b9350506109bc565b6109f1565b60ff821615806109cd575060ff8116155b6109f157816109db81610e87565b92505080806109e990610e87565b915050610994565b50509050949350505050565b6000600160ff841615801590610a15575060ff851615155b15610a9b576000610a27600186610e6e565b90506000610a36876001610e4f565b90505b610a4588828488610b3d565b15610a5c5782610a5481610e30565b935050610a61565b610a98565b60ff82161580610a74575060068160ff16115b610a985781610a8281610e87565b9250508080610a9090610e30565b915050610a39565b50505b60ff841615801590610aaf575060ff851615155b15610837576000610ac1856001610e4f565b90506000610ad0600188610e6e565b90505b60078260ff161080610ae3575060015b156109f157610af488828488610b3d565b156109b75782610b0381610e30565b93505060068260ff161180610b19575060ff8116155b6109f15781610b2781610e30565b9250508080610b3590610e87565b915050610ad3565b60008160ff16858560ff1660068110610b5857610b58610dd2565b018460ff1660068110610b6d57610b6d610dd2565b602081049091015460ff601f9092166101000a900416149050949350505050565b6040518060c001604052806006905b610ba5610c05565b815260200190600190039081610b9d5790505090565b8260068101928215610bf5579160200282015b82811115610bf5578251610be59083906006610c23565b5091602001919060010190610bce565b50610c01929150610cb2565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610ca65791602002820160005b83821115610c7757835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610c39565b8015610ca45782816101000a81549060ff0219169055600101602081600001049283019260010302610c77565b505b50610c01929150610cc6565b80821115610c015760008155600101610cb2565b80821115610c015760008155600101610cb2565b803560ff81168114610ceb57600080fd5b919050565b60008060408385031215610d0357600080fd5b610d0c83610cda565b9150610d1a60208401610cda565b90509250929050565b600060208284031215610d3557600080fd5b81356001600160a01b0381168114610d4c57600080fd5b9392505050565b600060208284031215610d6557600080fd5b610d4c82610cda565b610480810181836000805b6006808210610d885750610dc8565b835185845b83811015610dae57825160ff16825260209283019290910190600101610d8d565b50505060c094909401935060209290920191600101610d79565b5050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103610e4657610e46610e01565b60010192915050565b60ff8181168382160190811115610e6857610e68610e01565b92915050565b60ff8281168282160390811115610e6857610e68610e01565b600060ff821680610e9a57610e9a610e01565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019291505056fea2646970667358221220c1ca77468a2fd4009dfdbf25722caeb94c4b09ed36626bf29bfe0ffc494a4da064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "challenge(address)": {
        "details": "opponent will go firstgame id is increated each time a new game is createdseason is over when timer (soon to be added) is past",
        "params": {
          "opponent": "challened"
        }
      },
      "makeMove(uint8,uint8)": {
        "params": {
          "_gameId": "id of game",
          "column": "selected column for move"
        }
      }
    },
    "stateVariables": {
      "gameId": {
        "details": "Initialised at 1 because it makes the first transaction slightly cheaper."
      },
      "getGame": {
        "details": "This automatically generates a getter for us, which will return `Game.player1`, `Game.player2`, `Game.moves`, and `Game.finished` (the arrays are skipped)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "GameOver()": [
        {
          "notice": "revert if game has been completed"
        }
      ],
      "InvalidSelection()": [
        {
          "notice": "revert if column choice is invalid"
        }
      ],
      "NotYourTurn()": [
        {
          "notice": "revert if caller isn't current team"
        }
      ],
      "SeasonOver()": [
        {
          "notice": "revert season is over (coming soon)"
        }
      ]
    },
    "events": {
      "GameCreated(uint8,address,address)": {
        "notice": "emiited when game is created"
      },
      "GameFinished(address,uint8)": {
        "notice": "emitted when game is complete"
      },
      "TurnTaken(address,uint8)": {
        "notice": "emitted after turn is successfully taken"
      }
    },
    "kind": "user",
    "methods": {
      "challenge(address)": {
        "notice": "challenge an address to a game of connect four"
      },
      "getGame(uint8)": {
        "notice": "An indexed list of games"
      },
      "makeMove(uint8,uint8)": {
        "notice": "current team plays a turn"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 621,
        "contract": "contracts/ConnectFour.sol:ConnectFour",
        "label": "gameId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 627,
        "contract": "contracts/ConnectFour.sol:ConnectFour",
        "label": "getGame",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_struct(Game)617_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint8)6_storage)6_storage": {
        "base": "t_array(t_uint8)6_storage",
        "encoding": "inplace",
        "label": "uint8[6][6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint8)6_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[6]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint8,t_struct(Game)617_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ConnectFour.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)617_storage"
      },
      "t_struct(Game)617_storage": {
        "encoding": "inplace",
        "label": "struct ConnectFour.Game",
        "members": [
          {
            "astId": 604,
            "contract": "contracts/ConnectFour.sol:ConnectFour",
            "label": "teamOne",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 606,
            "contract": "contracts/ConnectFour.sol:ConnectFour",
            "label": "teamTwo",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 608,
            "contract": "contracts/ConnectFour.sol:ConnectFour",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 610,
            "contract": "contracts/ConnectFour.sol:ConnectFour",
            "label": "turn",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 616,
            "contract": "contracts/ConnectFour.sol:ConnectFour",
            "label": "board",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint8)6_storage)6_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}