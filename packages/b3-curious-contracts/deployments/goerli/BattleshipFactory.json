{
  "address": "0x66a9341c93B7523f13133682d0ACC5BCaB1F79Cb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "teamOne",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "teamTwo",
          "type": "address"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teamTwo",
          "type": "address"
        }
      ],
      "name": "deployAndChallange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGames",
      "outputs": [
        {
          "internalType": "contract BattleshipImpl[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xae4a54b8a04c49e289fc2710a132a7896c5ef42176b786917959958fd281d9e5",
  "receipt": {
    "to": null,
    "from": "0x629750317d320B8bB4d48D345A6d699Cc855c4a6",
    "contractAddress": "0x66a9341c93B7523f13133682d0ACC5BCaB1F79Cb",
    "transactionIndex": 68,
    "gasUsed": "316964",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8616edb02f23182e8784b4442b7c18eedeae910ccd78356ecdd987d936a70820",
    "transactionHash": "0xae4a54b8a04c49e289fc2710a132a7896c5ef42176b786917959958fd281d9e5",
    "logs": [],
    "blockNumber": 8234052,
    "cumulativeGasUsed": "9495539",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0f4B62eF8A3837b177001383FD6eEAD447DFc1F6"
  ],
  "numDeployments": 7,
  "solcInputHash": "f88ee0e4bfb81e69a646c1aa2e3e65fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamOne\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamTwo\",\"type\":\"address\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTwo\",\"type\":\"address\"}],\"name\":\"deployAndChallange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGames\",\"outputs\":[{\"internalType\":\"contract BattleshipImpl[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BattleshipFactory.sol\":\"BattleshipFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"contracts/BattleshipFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./BattleshipImpl.sol\\\";\\n\\ncontract BattleshipFactory {\\n    event GameCreated(address gameAddress, address teamOne, address teamTwo);\\n\\n    uint private gameId;\\n    address private battleshipImplAddr;\\n\\n    // gameId -> contract implementation\\n    mapping(uint => BattleshipImpl) BattleshipGames;\\n\\n    modifier uniqueTeams(address teamTwo) {\\n        require(msg.sender != teamTwo);\\n        _;\\n    }\\n\\n    function deployAndChallange(address teamTwo) external uniqueTeams(teamTwo) {\\n        BattleshipImpl newGame = BattleshipImpl(\\n            Clones.clone(battleshipImplAddr)\\n        );\\n        newGame.init(msg.sender, teamTwo);\\n        BattleshipGames[gameId] = newGame;\\n        gameId = ++gameId;\\n        emit GameCreated(address(newGame), msg.sender, teamTwo);\\n    }\\n\\n    constructor(address implAddress) {\\n        battleshipImplAddr = implAddress;\\n    }\\n\\n    function getGames() public view returns (BattleshipImpl[] memory) {\\n        BattleshipImpl[] memory games = new BattleshipImpl[](gameId);\\n        for (uint i = 0; i < gameId; i++) {\\n            games[i] = BattleshipGames[i];\\n        }\\n        return games;\\n    }\\n}\\n\",\"keccak256\":\"0x2da651119dfc9e10c57d3608a0427916fb377f7f4ed0c2a1902281144d1428aa\",\"license\":\"GPL-3.0\"},\"contracts/BattleshipImpl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title onchain battleship\\n * @author @Da-Colon (github)\\n */\\ncontract BattleshipImpl {\\n    event TeamReady(uint teamNumber);\\n    event TurnFinished(address team, bytes4 target, bool isSuccessful);\\n    event GameFinished(address winner);\\n\\n    address public game_winner = address(0);\\n    address public teamOne = address(0);\\n    address public teamTwo = address(0);\\n    address public currentTurn = address(0);\\n\\n    mapping(address => bool) private teamReady;\\n    mapping(address => mapping(bytes4 => uint8)) private locations;\\n    mapping(address => TeamHits) private teamHits;\\n\\n    struct TeamHits {\\n        uint8 hitCount;\\n        mapping(bytes4 => uint8) targeted;\\n    }\\n\\n    modifier piecesSet(bool isReady) {\\n        require(teamReady[msg.sender] == isReady, \\\"Pieces Set\\\");\\n        _;\\n    }\\n\\n    modifier gameOver() {\\n        require(game_winner == address(0), \\\"Game is Over\\\");\\n        _;\\n    }\\n\\n    modifier checkTurn() {\\n        if ((currentTurn == address(0) && msg.sender == teamTwo)) {\\n            _;\\n            return;\\n        }\\n        require(currentTurn == msg.sender, \\\"Not your turn\\\");\\n        _;\\n    }\\n\\n    function checkAndSetPieces(\\n        bytes4[15] memory targets,\\n        address team,\\n        uint8 teamNumber\\n    ) private {\\n        for (uint256 i; i < targets.length; i++) {\\n            locations[team][targets[i]] = 1;\\n        }\\n        teamReady[team] = true;\\n        emit TeamReady(teamNumber);\\n    }\\n\\n    function setTeamOnePieces(\\n        bytes4[15] memory targets\\n    ) external piecesSet(false) {\\n        require(msg.sender == teamOne, \\\"Team One Only\\\");\\n        checkAndSetPieces(targets, msg.sender, 1);\\n    }\\n\\n    function setTeamTwoPieces(\\n        bytes4[15] memory targets\\n    ) external piecesSet(false) {\\n        require(msg.sender == teamTwo, \\\"Team Two Only\\\");\\n        checkAndSetPieces(targets, msg.sender, 2);\\n    }\\n\\n    function targetSpot(bytes4 target, address defTeam) private gameOver {\\n        if (\\n            locations[defTeam][target] == 1 &&\\n            teamHits[msg.sender].targeted[target] == 0\\n        ) {\\n            uint8 raisedHit = ++teamHits[msg.sender].hitCount;\\n            teamHits[msg.sender].hitCount = raisedHit;\\n            teamHits[msg.sender].targeted[target] = 1;\\n            if (raisedHit == 15) {\\n                game_winner = msg.sender;\\n                emit GameFinished(msg.sender);\\n            } else {\\n                emit TurnFinished(msg.sender, target, true);\\n            }\\n        } else {\\n            emit TurnFinished(msg.sender, target, false);\\n        }\\n\\n        currentTurn = defTeam;\\n    }\\n\\n    function takeTurn(bytes4 target) external piecesSet(true) checkTurn {\\n        if (msg.sender == teamOne) {\\n            targetSpot(target, teamTwo);\\n        } else {\\n            targetSpot(target, teamOne);\\n        }\\n    }\\n\\n    function init(address _teamOne, address _teamTwo) public {\\n        teamOne = _teamOne;\\n        teamTwo = _teamTwo;\\n    }\\n}\\n\",\"keccak256\":\"0x12ee319bbd33ec7519266479ed5c2aa743d0021505c350f20091a72a5338d731\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104ec3803806104ec83398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610459806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ae783a821461003b578063c04c594714610050575b600080fd5b61004e610049366004610334565b61006e565b005b6100586101bf565b6040516100659190610364565b60405180910390f35b806001600160a01b038116330361008457600080fd5b60015460009061009c906001600160a01b0316610275565b6040517ff09a40160000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0385811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561010257600080fd5b505af1158015610116573d6000803e3d6000fd5b505060008054815260026020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386161790558054909250829150610169906103b1565b9182905550600055604080516001600160a01b03838116825233602083015285168183015290517fd3432ff5c78a4cfac45492c26900080695bc03e553bf581d99afdee4869c3e719181900360600190a1505050565b60606000805467ffffffffffffffff8111156101dd576101dd6103f7565b604051908082528060200260200182016040528015610206578160200160208202803683370190505b50905060005b60005481101561026f5760008181526002602052604090205482516001600160a01b03909116908390839081106102455761024561040d565b6001600160a01b039092166020928302919091019091015280610267816103b1565b91505061020c565b50919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811661032f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b60006020828403121561034657600080fd5b81356001600160a01b038116811461035d57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156103a55783516001600160a01b031683529284019291840191600101610380565b50909695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036103f057634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212205a9875fac337db2deace46ae8e4e7c7a32660f700a851c790c18f0ec5fd8fdf364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063ae783a821461003b578063c04c594714610050575b600080fd5b61004e610049366004610334565b61006e565b005b6100586101bf565b6040516100659190610364565b60405180910390f35b806001600160a01b038116330361008457600080fd5b60015460009061009c906001600160a01b0316610275565b6040517ff09a40160000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0385811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561010257600080fd5b505af1158015610116573d6000803e3d6000fd5b505060008054815260026020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386161790558054909250829150610169906103b1565b9182905550600055604080516001600160a01b03838116825233602083015285168183015290517fd3432ff5c78a4cfac45492c26900080695bc03e553bf581d99afdee4869c3e719181900360600190a1505050565b60606000805467ffffffffffffffff8111156101dd576101dd6103f7565b604051908082528060200260200182016040528015610206578160200160208202803683370190505b50905060005b60005481101561026f5760008181526002602052604090205482516001600160a01b03909116908390839081106102455761024561040d565b6001600160a01b039092166020928302919091019091015280610267816103b1565b91505061020c565b50919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811661032f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b60006020828403121561034657600080fd5b81356001600160a01b038116811461035d57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156103a55783516001600160a01b031683529284019291840191600101610380565b50909695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036103f057634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212205a9875fac337db2deace46ae8e4e7c7a32660f700a851c790c18f0ec5fd8fdf364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 447,
        "contract": "contracts/BattleshipFactory.sol:BattleshipFactory",
        "label": "gameId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 449,
        "contract": "contracts/BattleshipFactory.sol:BattleshipFactory",
        "label": "battleshipImplAddr",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 454,
        "contract": "contracts/BattleshipFactory.sol:BattleshipFactory",
        "label": "BattleshipGames",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_contract(BattleshipImpl)923)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BattleshipImpl)923": {
        "encoding": "inplace",
        "label": "contract BattleshipImpl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(BattleshipImpl)923)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract BattleshipImpl)",
        "numberOfBytes": "32",
        "value": "t_contract(BattleshipImpl)923"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}