{
  "address": "0x31B2E48c8E17d3Cf2A8Ae8590788c94FD187f38F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "battleshipImplAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teamtwo",
          "type": "address"
        }
      ],
      "name": "deployAndChallange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGames",
      "outputs": [
        {
          "internalType": "contract BattleshipImpl[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d2156b740f601fd4b61885a7c82a655e3e10fb44b65670f1d492399de90deb0",
  "receipt": {
    "to": null,
    "from": "0x629750317d320B8bB4d48D345A6d699Cc855c4a6",
    "contractAddress": "0x31B2E48c8E17d3Cf2A8Ae8590788c94FD187f38F",
    "transactionIndex": 125,
    "gasUsed": "329948",
    "logsBloom": "0x
    "blockHash": "0x31e806b58c1a00426b47ce14a5a0effbf1d1a19beaead6abb657592eb23a332d",
    "transactionHash": "0x0d2156b740f601fd4b61885a7c82a655e3e10fb44b65670f1d492399de90deb0",
    "logs": [],
    "blockNumber": 8216460,
    "cumulativeGasUsed": "22363629",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBf6A740ebC973cfB8236050e2b54ff26D2f06513"
  ],
  "numDeployments": 3,
  "solcInputHash": "5b111706a6cf6245bf4c400234ec8153",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"battleshipImplAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamtwo\",\"type\":\"address\"}],\"name\":\"deployAndChallange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGames\",\"outputs\":[{\"internalType\":\"contract BattleshipImpl[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BattleshipFactory.sol\":\"BattleshipFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"contracts/BattleshipFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./BattleshipImpl.sol\\\";\\n\\ncontract BattleshipFactory {\\n    event GameCreated(address gameAddress, uint gameId);\\n    mapping(uint => BattleshipImpl) BattleshipGames;\\n    uint public gameId;\\n\\n    address public battleshipImplAddr;\\n\\n    function deployAndChallange(address teamtwo) external {\\n        BattleshipImpl newGame = BattleshipImpl(\\n            Clones.clone(battleshipImplAddr)\\n        );\\n\\n        newGame.init(msg.sender, teamtwo);\\n\\n        BattleshipGames[gameId] = newGame;\\n\\n        gameId = ++gameId;\\n        emit GameCreated(address(newGame), gameId);\\n    }\\n\\n    constructor(address implAddress) {\\n        battleshipImplAddr = implAddress;\\n    }\\n\\n    function getGames() public view returns (BattleshipImpl[] memory) {\\n        BattleshipImpl[] memory games = new BattleshipImpl[](gameId);\\n        for (uint i = 0; i < gameId; i++) {\\n            games[i] = BattleshipGames[i];\\n        }\\n        return games;\\n    }\\n}\\n\",\"keccak256\":\"0x4b4707704f54624e9732770c511ee72c249061ad56d5a4e001b34d543f36adfa\",\"license\":\"GPL-3.0\"},\"contracts/BattleshipImpl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title onchain battleship\\n */\\ncontract BattleshipImpl {\\n    /**\\n     * @notice This will be used to track which addresses are parcipating\\n     * @param team1 address of team 1\\n     * @param team2 address of team 2\\n     */\\n    event GameCreated(address team1, address team2);\\n    /**\\n     * @notice This event will only event fire twice per contract, when 2 events have been fired game can begin\\n     * @param team address of team 1\\n     */\\n    event TeamReady(address team);\\n\\n    /**\\n     * @notice This will keep history of moves taken\\n     * @notice This should filtered and used by front-end to update hit/misses\\n     * @param team address of team whose turn was taken\\n     * @param target target location of attempted hit\\n     */\\n    event TurnFinished(address team, bytes4 target, bool isSuccessful);\\n\\n    event GameFinished(address winner);\\n\\n    /**\\n     * @dev Set to 0x0000~ while game is active. game is over when winner is set\\n     * @notice This should be updated with winner when game is over\\n     */\\n    address game_winner = address(0);\\n\\n    address public team1 = address(0);\\n    address public team2 = address(0);\\n    address public currentTurn = address(0);\\n\\n    /**\\n     * unit8 0 | undefined: nothing\\n     * unit8 1 : ship\\n     */\\n    struct TeamHits {\\n        uint8 hitCount;\\n        mapping(bytes4 => uint8) targeted;\\n    }\\n\\n    mapping(address => mapping(bytes4 => uint8)) private locations;\\n    mapping(address => TeamHits) teamHits;\\n    mapping(address => bool) private teamReady;\\n\\n    // function getTeamHitCounts()\\n    //     public\\n    //     view\\n    //     returns (uint8 team1Count, uint8 team2Count)\\n    // {\\n    //     team1Count = teamHits[team1].hitCount;\\n    //     team2Count = teamHits[team2].hitCount;\\n    // }\\n\\n    /**\\n     * initilizes game between two addresses\\n     */\\n    // @todo create factory contract\\n    function init(address _team1, address _team2) public {\\n        team1 = _team1;\\n        team2 = _team2;\\n        emit GameCreated(team1, team2);\\n    }\\n\\n    /**\\n     * Sets ship locations for each team\\n     * @notice emits event 'TeamReady'\\n     */\\n    function checkAndSetPieces(\\n        bytes4[15] memory targets,\\n        address team\\n    ) private {\\n        for (uint256 i; i < targets.length; i++) {\\n            locations[team][targets[i]] = 1;\\n        }\\n        teamReady[team] = true;\\n        emit TeamReady(team);\\n    }\\n\\n    modifier piecesSet() {\\n        require(teamReady[msg.sender] == false, \\\"Pieces Set\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Sets locations for team 1 ships\\n     * @param targets byte array of ship locations\\n     * @notice Team 1 Only | Team Pieces not already set\\n     *\\n     */\\n    function setTeamOnePieces(bytes4[15] memory targets) external piecesSet {\\n        require(msg.sender == team1, \\\"Team One Only\\\");\\n        checkAndSetPieces(targets, msg.sender);\\n    }\\n\\n    /**\\n     * Sets locations for team 2 ships\\n     * @param targets byte array of ship locations\\n     * @notice Team 2 Only | Team Pieces not already set\\n     *\\n     */\\n    function setTeamTwoPieces(bytes4[15] memory targets) external piecesSet {\\n        require(msg.sender == team2, \\\"Team Two Only\\\");\\n        checkAndSetPieces(targets, msg.sender);\\n    }\\n\\n    modifier gameOver() {\\n        require(game_winner == address(0), \\\"Game is Over\\\");\\n        _;\\n    }\\n\\n    function targetSpot(bytes4 target, address defTeam) private gameOver {\\n        if (locations[defTeam][target] == 1 && teamHits[msg.sender].targeted[target] == 0) {\\n            uint8 raisedHit = ++teamHits[msg.sender].hitCount;\\n            teamHits[msg.sender].hitCount = raisedHit;\\n            teamHits[msg.sender].targeted[target] = 1;\\n            if (raisedHit == 15) {\\n                game_winner = msg.sender;\\n                emit GameFinished(msg.sender);\\n            } else {\\n                emit TurnFinished(msg.sender, target, true);\\n            }\\n        } else {\\n            emit TurnFinished(msg.sender, target, false);\\n        }\\n\\n        currentTurn = defTeam;\\n    }\\n\\n    modifier checkTurn() {\\n        if (\\n            (currentTurn == address(0) && msg.sender == team2)\\n        ) {\\n            _;\\n            return;\\n        }\\n        require(currentTurn == msg.sender, \\\"Not your turn\\\");\\n        _;\\n    }\\n\\n    function takeTurn(bytes4 target) external checkTurn {\\n        if (msg.sender == team1) {\\n            targetSpot(target, team2);\\n        } else {\\n            targetSpot(target, team1);\\n        }\\n    }\\n\\n    /**\\n     *\\n     */\\n    // function forfeitMatch() public {}\\n}\\n\",\"keccak256\":\"0xdb18f2353dd58554c86382c4a9ce9c0a560bbcd0bcc2250f275d07e33c23064d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161052838038061052883398101604081905261002f91610054565b600280546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610495806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631873516d14610051578063ae783a8214610081578063c04c594714610096578063d7c81b55146100ab575b600080fd5b600254610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f366004610370565b6100c2565b005b61009e6101fa565b60405161007891906103a0565b6100b460015481565b604051908152602001610078565b6002546000906100da906001600160a01b03166102b1565b6040517ff09a40160000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0384811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561014057600080fd5b505af1158015610154573d6000803e3d6000fd5b505060018054600090815260208190526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716179055815491935091506101a9906103ed565b91829055506001819055604080516001600160a01b038416815260208101929092527f306841c3fce8498c2d9b7194b8da4c04d03847394e237b625ce6d029b107f077910160405180910390a15050565b6060600060015467ffffffffffffffff81111561021957610219610433565b604051908082528060200260200182016040528015610242578160200160208202803683370190505b50905060005b6001548110156102ab5760008181526020819052604090205482516001600160a01b039091169083908390811061028157610281610449565b6001600160a01b0390921660209283029190910190910152806102a3816103ed565b915050610248565b50919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811661036b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b60006020828403121561038257600080fd5b81356001600160a01b038116811461039957600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156103e15783516001600160a01b0316835292840192918401916001016103bc565b50909695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361042c57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212202c29916495963872602d080b64adc25a8e5b4ea8bab705bb30ba4e4d3041d91064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631873516d14610051578063ae783a8214610081578063c04c594714610096578063d7c81b55146100ab575b600080fd5b600254610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f366004610370565b6100c2565b005b61009e6101fa565b60405161007891906103a0565b6100b460015481565b604051908152602001610078565b6002546000906100da906001600160a01b03166102b1565b6040517ff09a40160000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0384811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561014057600080fd5b505af1158015610154573d6000803e3d6000fd5b505060018054600090815260208190526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716179055815491935091506101a9906103ed565b91829055506001819055604080516001600160a01b038416815260208101929092527f306841c3fce8498c2d9b7194b8da4c04d03847394e237b625ce6d029b107f077910160405180910390a15050565b6060600060015467ffffffffffffffff81111561021957610219610433565b604051908082528060200260200182016040528015610242578160200160208202803683370190505b50905060005b6001548110156102ab5760008181526020819052604090205482516001600160a01b039091169083908390811061028157610281610449565b6001600160a01b0390921660209283029190910190910152806102a3816103ed565b915050610248565b50919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811661036b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b60006020828403121561038257600080fd5b81356001600160a01b038116811461039957600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156103e15783516001600160a01b0316835292840192918401916001016103bc565b50909695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361042c57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212202c29916495963872602d080b64adc25a8e5b4ea8bab705bb30ba4e4d3041d91064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 94,
        "contract": "contracts/BattleshipFactory.sol:BattleshipFactory",
        "label": "BattleshipGames",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(BattleshipImpl)557)"
      },
      {
        "astId": 96,
        "contract": "contracts/BattleshipFactory.sol:BattleshipFactory",
        "label": "gameId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 98,
        "contract": "contracts/BattleshipFactory.sol:BattleshipFactory",
        "label": "battleshipImplAddr",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BattleshipImpl)557": {
        "encoding": "inplace",
        "label": "contract BattleshipImpl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(BattleshipImpl)557)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract BattleshipImpl)",
        "numberOfBytes": "32",
        "value": "t_contract(BattleshipImpl)557"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}