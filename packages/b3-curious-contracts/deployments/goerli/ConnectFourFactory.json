{
  "address": "0xB6567EA2801d95d3570324AFB7Ce5c0aB1EB303F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "seasonId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        }
      ],
      "name": "NewConnectFourSeasonCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "connectFourGames",
      "outputs": [
        {
          "internalType": "contract ConnectFour",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployNewSeason",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGames",
      "outputs": [
        {
          "internalType": "contract ConnectFour[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x193b57a021f34e3b815cd0418fc43240eadd9ad0f884dffa40a39bca8e401f9a",
  "receipt": {
    "to": null,
    "from": "0x629750317d320B8bB4d48D345A6d699Cc855c4a6",
    "contractAddress": "0xB6567EA2801d95d3570324AFB7Ce5c0aB1EB303F",
    "transactionIndex": 79,
    "gasUsed": "291954",
    "logsBloom": "0x
    "blockHash": "0xf8b29e7bf498e8ba806abce8bc5fe7f667bc8fed7bafe4d7d5df7309993a5493",
    "transactionHash": "0x193b57a021f34e3b815cd0418fc43240eadd9ad0f884dffa40a39bca8e401f9a",
    "logs": [],
    "blockNumber": 8342445,
    "cumulativeGasUsed": "25456136",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x01ffd68724f1f83f8c8cC9EcE8DCD94914FD85F9"
  ],
  "numDeployments": 1,
  "solcInputHash": "1928e4129e76ce2b685e501fe1608708",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"seasonId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"}],\"name\":\"NewConnectFourSeasonCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"connectFourGames\",\"outputs\":[{\"internalType\":\"contract ConnectFour\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployNewSeason\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGames\",\"outputs\":[{\"internalType\":\"contract ConnectFour[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConnectFourFactory.sol\":\"ConnectFourFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"contracts/ConnectFour.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\ncontract ConnectFour {\\n    /// @notice revert if caller isn't current team\\n    error NotYourTurn();\\n    /// @notice revert if column choice is invalid\\n    error InvalidSelection();\\n    /// @notice revert if game has been completed\\n    error GameOver();\\n    /// @notice revert season is over (coming soon)\\n    error SeasonOver();\\n\\n    /// @notice emiited when game is created\\n    event GameCreated(uint gameId, address teamOne, address teamTwo);\\n    /// @notice emitted after turn is successfully taken\\n    event TurnTaken(uint gameId, address team, uint8 column);\\n    /// @notice emitted when game is complete\\n    event GameFinished(uint gameId, address winner);\\n\\n    /// @notice holds game data\\n    /// @param teamOne address of challenger\\n    /// @param teamTwo address of challenged\\n    /// @param winner address of winning team; default: address(0)\\n    /// @param turn current turn is calculated using bitwise for basically odd/even teamOne/teamTwo\\n    /// @param board holds game board data; each 'square' holds current data; 0 = no chip; 1 = team one; 2 = team two\\n    struct Game {\\n        address teamOne;\\n        address teamTwo;\\n        address winner;\\n        uint8 turn;\\n        uint8[6][6] board;\\n    }\\n\\n    /// @notice Used as a counter for the next game index.\\n    /// @dev Initialised at 1 because it makes the first transaction slightly cheaper.\\n    uint public gameId;\\n\\n    /// @notice An indexed list of games\\n    /// @dev This automatically generates a getter for us, which will return `Game.player1`, `Game.player2`, `Game.moves`, and `Game.finished` (the arrays are skipped)\\n    mapping(uint => Game) public getGame;\\n\\n    /// @notice prevent move if column is invalid\\n    modifier validColumn(uint8 column) {\\n        if (column >= 6) revert InvalidSelection();\\n        _;\\n    }\\n\\n    /// @notice prevents gameplay if game is over\\n    modifier gameOver(uint _gameId) {\\n        if (getGame[_gameId].winner != address(0)) revert GameOver();\\n        _;\\n    }\\n\\n    /// @notice prevents new games when season is over. (coming soon)\\n    modifier seasonOver() {\\n        _;\\n    }\\n\\n    /// @notice prevents teams being the same address\\n    modifier uniqueTeams(address opponent) {\\n        require(msg.sender != opponent);\\n        _;\\n    }\\n\\n    /**\\n     * @notice challenge an address to a game of connect four\\n     * @param opponent challened\\n     * @dev opponent will go first\\n     * @dev game id is increated each time a new game is created\\n     * @dev season is over when timer (soon to be added) is past\\n     */\\n    function challenge(address opponent) public uniqueTeams(opponent) {\\n        uint8[6][6] memory newBoard;\\n        Game memory newGame = Game({\\n            teamOne: msg.sender,\\n            teamTwo: opponent,\\n            turn: uint8(0),\\n            winner: address(0),\\n            board: newBoard\\n        });\\n        getGame[gameId] = newGame;\\n\\n        emit GameCreated(gameId, msg.sender, opponent);\\n\\n        gameId++;\\n    }\\n\\n    /**\\n     * @notice current team plays a turn\\n     * @param _gameId id of game\\n     * @param column selected column for move\\n     */\\n    function makeMove(\\n        uint8 _gameId,\\n        uint8 column\\n    ) external gameOver(_gameId) validColumn(column) {\\n        Game storage game = getGame[_gameId];\\n\\n        /// @notice row where chip will land\\n        uint8 row;\\n        /// @notice assigned team number for squares\\n        uint8 teamNum = game.turn & 1 == 0 ? 2 : 1;\\n\\n        /// @notice prevents plays being made by other addresses\\n        /// @dev even or odd bitwise operator decides turn\\n        /// @dev starts with team two\\n        if (msg.sender != (game.turn & 1 == 0 ? game.teamTwo : game.teamOne)) {\\n            revert NotYourTurn();\\n        }\\n\\n        /// @notice finds where chip will land\\n        for (uint8 i = 0; i < 6; i++) {\\n            uint8 square = game.board[i][column];\\n            if (i == 5) {\\n                revert InvalidSelection();\\n            }\\n            if (square == 0) {\\n                row = i++;\\n                break;\\n            }\\n        }\\n\\n        /// @notice assigns chip to location onboard\\n        game.board[row][column] = teamNum;\\n        /// @notice increments turn\\n        game.turn++;\\n\\n        emit TurnTaken(_gameId, msg.sender, column);\\n\\n        /// @notice checks surrounding squares for connected pieces\\n        if (didPlayerWin(_gameId, column, row, teamNum)) {\\n            game.winner = msg.sender;\\n            emit GameFinished(_gameId, msg.sender);\\n        }\\n    }\\n\\n    /// @notice checks square for team's chip\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkSquare(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (bool) {\\n        uint8[6][6] storage board = getGame[_gameId].board;\\n        return board[row][column] == teamNum;\\n    }\\n\\n    /// @notice checks the horizontal win\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkHorizonalWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint) {\\n        uint connectedPiecesCount = 1;\\n\\n        /// @dev checks to the right of new piece\\n        for (uint8 i = column + 1; i < 6 - column; i++) {\\n            if (checkSquare(_gameId, i, row, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n        /// @dev checks to the left of new piece\\n        if (column != 0) {\\n            uint8 columnIndex = column - 1;\\n            while (columnIndex >= 0) {\\n                if (checkSquare(_gameId, columnIndex, row, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (columnIndex == 0) {\\n                    break;\\n                } else {\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the veritical win\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkVericalWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint) {\\n        uint connectedPiecesCount = 1;\\n\\n        /// @dev checks rows above new piece\\n        for (uint8 i = row + 1; i < 6 - row; i++) {\\n            if (checkSquare(_gameId, column, i, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n        /// @dev checks rows below new piece\\n        if (row != 0) {\\n            uint8 rowIndex = row - 1;\\n            while (rowIndex >= 0) {\\n                if (checkSquare(_gameId, column, rowIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the forward angle win\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkForwardAngleWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint) {\\n        uint connectedPiecesCount = 1;\\n\\n        /// @dev checks forward angle up\\n        for (uint8 i = row + 1; i < 6 - row; i++) {\\n            if (checkSquare(_gameId, i, i, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        /// @dev checks forward angle down\\n        if (row != 0 && column != 0) {\\n            uint8 rowIndex = row - 1;\\n            uint8 columnIndex = column - 1;\\n            while (rowIndex >= 0 || columnIndex >= 0) {\\n                if (checkSquare(_gameId, columnIndex, rowIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0 || columnIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the backward angle win\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkBackwardAngleWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint) {\\n        uint connectedPiecesCount = 1;\\n\\n        /// @dev checks backward angle down\\n        if (row != 0 && column != 0) {\\n            uint8 rowIndex = row - 1;\\n            uint8 columnIndex = column + 1;\\n            while (rowIndex >= 0 || columnIndex < 7) {\\n                if (checkSquare(_gameId, columnIndex, rowIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0 || columnIndex > 6) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                    columnIndex++;\\n                }\\n            }\\n        }\\n\\n        /// @dev checks forward angle down\\n        if (row != 0 && column != 0) {\\n            uint8 rowIndex = row + 1;\\n            uint8 columnIndex = column - 1;\\n            while (rowIndex < 7 || columnIndex >= 0) {\\n                if (checkSquare(_gameId, columnIndex, rowIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex > 6 || columnIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex++;\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks to see if current play won the game\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function didPlayerWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (bool) {\\n        /// @dev using new chip location as middle == m\\n        /// @dev [ [ C+1 | R-1 ] [  C+1  ] [ C+1 | R+1 ] ]\\n        /// @dev [ [    R-1    ] [ C | R ] [    R+1    ]\\n        /// @dev [ [ C-1 | R-1 ] [  C-1  ] [ C-1 | R+1 ] ]\\n\\n        uint horionalCount = checkHorizonalWin(_gameId, column, row, teamNum);\\n        if (horionalCount == 4) {\\n            return true;\\n        }\\n        uint vericalCount = checkVericalWin(_gameId, column, row, teamNum);\\n        if (vericalCount == 4) {\\n            return true;\\n        }\\n        uint forwardAngleCount = checkForwardAngleWin(\\n            _gameId,\\n            column,\\n            row,\\n            teamNum\\n        );\\n        if (forwardAngleCount == 4) {\\n            return true;\\n        }\\n        uint backwardAngleCount = checkBackwardAngleWin(\\n            _gameId,\\n            column,\\n            row,\\n            teamNum\\n        );\\n        if (backwardAngleCount == 4) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getGameBoard(\\n        uint8 _gameId\\n    ) public view returns (uint8[6][6] memory) {\\n        return getGame[_gameId].board;\\n    }\\n}\\n\",\"keccak256\":\"0x4ca0da806b0dbdfe69b972b8d3a3eab2d77b5477c33c79606fe8e9e6a2c6e30e\",\"license\":\"GPL-3.0\"},\"contracts/ConnectFourFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./ConnectFour.sol\\\";\\n\\ncontract ConnectFourFactory {\\n    event NewConnectFourSeasonCreated(uint8 seasonId, address gameAddress);\\n\\n    uint8 private seasonId;\\n    address private connectFourImplAddr;\\n\\n    // gameId -> contract implementation\\n    mapping(uint8 => ConnectFour) public connectFourGames;\\n\\n    function deployNewSeason() public returns (uint8) {\\n        ConnectFour newGame = ConnectFour(Clones.clone(connectFourImplAddr));\\n        connectFourGames[seasonId] = newGame;\\n\\n        emit NewConnectFourSeasonCreated(seasonId, address(newGame));\\n\\n        return seasonId++;\\n    }\\n\\n    constructor(address implAddress) {\\n        connectFourImplAddr = implAddress;\\n    }\\n\\n    function getGames() public view returns (ConnectFour[] memory) {\\n        ConnectFour[] memory games = new ConnectFour[](seasonId);\\n        for (uint8 i = 0; i < seasonId; i++) {\\n            games[i] = connectFourGames[i];\\n        }\\n        return games;\\n    }\\n}\\n\",\"keccak256\":\"0xe7e196e849da8403bb0a709cd2db73988c6c418a30882faf2733fa0db134a5dd\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161047938038061047983398101604081905261002f9161005a565b600080546001600160a01b0390921661010002610100600160a81b031990921691909117905561008a565b60006020828403121561006c57600080fd5b81516001600160a01b038116811461008357600080fd5b9392505050565b6103e0806100996000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806314c7457114610046578063c04c594714610065578063c46f7fe71461007a575b600080fd5b61004e6100bb565b60405160ff90911681526020015b60405180910390f35b61006d610178565b60405161005c91906102da565b6100a3610088366004610327565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161005c565b6000805481906100d89061010090046001600160a01b031661023c565b6000805460ff908116825260016020908152604080842080546001600160a01b0319166001600160a01b0387169081179091559354815193168352908201929092529192507f7a6fa76d0a77eb17c494725b653ed447a947a86a0fe8607f532e864f9ae9d4ec910160405180910390a16000805460ff16908061015a83610351565b91906101000a81548160ff021916908360ff16021790555091505090565b600080546060919060ff1667ffffffffffffffff81111561019b5761019b61037e565b6040519080825280602002602001820160405280156101c4578160200160208202803683370190505b50905060005b60005460ff90811690821610156102365760ff811660008181526001602052604090205483516001600160a01b03909116918491811061020c5761020c610394565b6001600160a01b03909216602092830291909101909101528061022e81610351565b9150506101ca565b50919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166102d55760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b6020808252825182820181905260009190848201906040850190845b8181101561031b5783516001600160a01b0316835292840192918401916001016102f6565b50909695505050505050565b60006020828403121561033957600080fd5b813560ff8116811461034a57600080fd5b9392505050565b600060ff821660ff810361037557634e487b7160e01b600052601160045260246000fd5b60010192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea264697066735822122020bc13fdd1257a324e1f58265a730126e9c27bc144a205f24538c6cdb55478ac64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806314c7457114610046578063c04c594714610065578063c46f7fe71461007a575b600080fd5b61004e6100bb565b60405160ff90911681526020015b60405180910390f35b61006d610178565b60405161005c91906102da565b6100a3610088366004610327565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161005c565b6000805481906100d89061010090046001600160a01b031661023c565b6000805460ff908116825260016020908152604080842080546001600160a01b0319166001600160a01b0387169081179091559354815193168352908201929092529192507f7a6fa76d0a77eb17c494725b653ed447a947a86a0fe8607f532e864f9ae9d4ec910160405180910390a16000805460ff16908061015a83610351565b91906101000a81548160ff021916908360ff16021790555091505090565b600080546060919060ff1667ffffffffffffffff81111561019b5761019b61037e565b6040519080825280602002602001820160405280156101c4578160200160208202803683370190505b50905060005b60005460ff90811690821610156102365760ff811660008181526001602052604090205483516001600160a01b03909116918491811061020c5761020c610394565b6001600160a01b03909216602092830291909101909101528061022e81610351565b9150506101ca565b50919050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166102d55760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b6020808252825182820181905260009190848201906040850190845b8181101561031b5783516001600160a01b0316835292840192918401916001016102f6565b50909695505050505050565b60006020828403121561033957600080fd5b813560ff8116811461034a57600080fd5b9392505050565b600060ff821660ff810361037557634e487b7160e01b600052601160045260246000fd5b60010192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea264697066735822122020bc13fdd1257a324e1f58265a730126e9c27bc144a205f24538c6cdb55478ac64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1453,
        "contract": "contracts/ConnectFourFactory.sol:ConnectFourFactory",
        "label": "seasonId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1455,
        "contract": "contracts/ConnectFourFactory.sol:ConnectFourFactory",
        "label": "connectFourImplAddr",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1460,
        "contract": "contracts/ConnectFourFactory.sol:ConnectFourFactory",
        "label": "connectFourGames",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_contract(ConnectFour)1441)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ConnectFour)1441": {
        "encoding": "inplace",
        "label": "contract ConnectFour",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_contract(ConnectFour)1441)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract ConnectFour)",
        "numberOfBytes": "32",
        "value": "t_contract(ConnectFour)1441"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}